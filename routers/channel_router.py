import asyncio
from collections import defaultdict
import json
import logging
import os
from random import randint
import asyncio
import random
from datetime import datetime, time, timedelta
import logging
from aiogram import F, Bot, Router
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.exceptions import TelegramBadRequest
from aiogram import Bot, Router, F
from aiogram.exceptions import TelegramRetryAfter, TelegramBadRequest
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
import pytz

from config.config import load_config
from database.db import create_user, create_user_in_batl, delete_users_single, edit_user, get_current_votes, get_participants, get_user, select_admin_photo, select_info_message, set_single_user, update_admin_battle_points, update_points, \
    get_round_results, get_message_ids, clear_message_ids,\
    select_battle_settings, select_all_admins,users_dual_win_update
from routers.globals_var import (
    vote_states, user_clicks, pair_locks, vote_states_locks,
    user_last_click, click_counters, click_reset_times
)
# from routers.globals_var import (
#     vote_states, user_clicks, pair_locks, vote_states_locks, user_last_click, 
#     click_counters, click_reset_times, ROUND_DURATION, INITIAL_UPDATE_DELAY, MAX_UPDATE_DELAY, 
#     DELAY_INCREASE_FACTOR, END_PHASE_THRESHOLD, MIN_REQUIRED_VOTES, MIN_VOTE_INCREMENT, 
#     MAX_VOTE_INCREMENT, MIN_UPDATE_INTERVAL, CLICK_COOLDOWN, 
#     MAX_CLICKS_PER_INTERVAL, RESET_INTERVAL, PHASE_1_END, PHASE_2_END, PHASE_3_END, 
#     PHASE_4_END, PHASE_5_END, PHASE_6_END, FINAL_PHASE, BEHAVIOR_LAG, BEHAVIOR_LEAD, 
#     BEHAVIOR_NORMAL, ERROR_RETRY_DELAY, BEHAVIOR_UPDATE_INTERVAL, PHASE_PARAMETERS
# )
import routers.globals_var

from filters.isAdmin import is_admin
from locks import battle_lock


_bot: Bot = None  # Placeholder for the bot instance

def setup_router(dp, bot: Bot):
    global _bot
    _bot = bot



channel_router = Router()


async def init_vote_state(message_id: int, admin_id: int, admin_position: str, opponent_id: int, current_start):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–¥–º–∏–Ω–æ–º
    """
    ROUND_DURATION = routers.globals_var.ROUND_DURATION

    if current_start.hour < 10 and current_start.hour >= 0:  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–µ–∂–¥—É 00:00 –∏ 10:00
        today = current_start.date()
        end_time = pytz.timezone('Europe/Moscow').localize(datetime.combine(today, time(hour=10)))
        round_duration = (end_time - current_start).total_seconds()
    else:
        round_duration = ROUND_DURATION
    print(round_duration)
    vote_states[message_id] = {
        'admin_id': admin_id,
        'admin_position': admin_position,
        'opponent_id': opponent_id,
        'current_votes': 0,
        'start_time': datetime.now(),
        'last_update_time': datetime.now(),
        'round_duration': round_duration,
        'vote_history': [],
        'is_single': admin_position == "middle"
    }

async def send_battle_pairs(bot: Bot, channel_id: int, participants, prize, round_txt, round_duration, min_votes, current_start):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—Ä—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
    """
    message_ids = []
    
    for i in range(0, len(participants), 2):
        if i + 1 < len(participants):
            pair_message_ids = await send_pair(bot, channel_id, participants[i], participants[i+1], prize, round_txt,round_duration, current_start)
        else:
            pair_message_ids = await send_single(bot, channel_id, participants[i], prize, round_txt,round_duration, min_votes, current_start)
        message_ids.extend(pair_message_ids)
    
    return message_ids

async def send_pair(bot: Bot, channel_id: int, participant1, participant2, prize, round_txt, round_duration, current_start):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—Ä—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª.
    """
    await asyncio.sleep(12)
    media = [
        InputMediaPhoto(media=participant1['photo_id'], caption=f""),
        InputMediaPhoto(media=participant2['photo_id'], caption=f"")
    ]
    media_message = await bot.send_media_group(channel_id, media)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–õ–µ–≤—ã–π: 0",
                              callback_data=f"vote:{participant1['user_id']}:left"),
        InlineKeyboardButton(text=f"–ü—Ä–∞–≤—ã–π: 0",
                              callback_data=f"vote:{participant2['user_id']}:right")]
    ])
    if '—Ä–∞—É–Ω–¥' in round_txt:
        num = 1
        for i in round_txt:
            if i.isdigit():
                num = int(i)
        round_txt = f'{num} —Ä–∞—É–Ω–¥'
    elif '–ø–æ–ª—É—Ñ–∏–Ω–∞–ª' in round_txt:
        round_txt = '–ü–æ–ª—É—Ñ–∏–Ω–∞–ª'
    elif '—Ñ–∏–Ω–∞–ª' in round_txt:
        round_txt = '–§–∏–Ω–∞–ª'
        
        
        
    # round_end = current_start + timedelta(minutes=round_duration)
    now = datetime.now(current_start.tzinfo)

    if now.hour < 10 and now.hour >= 0:  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –º–µ–∂–¥—É 23:00 –∏ 10:00
        today = now.date()
        round_end_time = pytz.timezone('Europe/Moscow').localize(datetime.combine(today, time(hour=10)))
        wait_time = (round_end_time - now).total_seconds()
        total_minutes = int(wait_time / 60)
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        minutes_passed = (now - current_start).total_seconds() / 60
        total_minutes = round_duration - int(minutes_passed)

    end_hour = (total_minutes // 60) % 24
    end_min = total_minutes % 60

    
    # end_hour = round_duration//60
    # end_min = round_duration % 60
    if end_hour == 0:
        end_text = f'{end_min} –º–∏–Ω'
    elif end_min == 0:
        if end_hour == 1:
            end_text = f'{end_hour} —á–∞—Å'
        elif 2 <= end_hour <= 4:
            end_text = f'{end_hour} —á–∞—Å–∞'
        elif end_hour >= 5:
            end_text = f'{end_hour} —á–∞—Å–æ–≤'
    elif end_hour != 0 and end_min != 0:
        if end_hour == 1:
            end_text = f'{end_hour} —á–∞—Å ' + f'{end_min} –º–∏–Ω'
        elif 2 <= end_hour <= 4:
            end_text = f'{end_hour} —á–∞—Å–∞ ' + f'{end_min} –º–∏–Ω'
        elif end_hour >= 5:
            end_text = f'{end_hour} —á–∞—Å–æ–≤ ' + f'{end_min} –º–∏–Ω'
        
    addit_msg = await select_info_message()
    if addit_msg and addit_msg[0]:
        addit_msg = addit_msg[0]
    else:
        addit_msg = ''
    vote_message = await bot.send_message(channel_id,
                                          f'<b>üëë {round_txt} üëë</b>\n\n'+
                                          f'‚è±Ô∏è–ò—Ç–æ–≥–∏ —á–µ—Ä–µ–∑ {end_text}‚è±Ô∏è\n\n'+
                                          f"<a href='t.me/c/{str(channel_id)[4:]}/{media_message[0].message_id}'>‚õìÔ∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ‚õìÔ∏è</a>\n\n"+
                                          f'üíµ–ü—Ä–∏–∑: {prize} üíµ\n\n'
                                          f'{addit_msg}',
                                          reply_markup=keyboard,
                                          parse_mode="HTML")
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º
    vote_link = f"https://t.me/c/{str(channel_id)[4:]}/{vote_message.message_id}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    notification_text = (
        f"üéØ <b>–ù–∞—á–∞–ª–æ—Å—å –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å –≤–∞—à–∏–º —É—á–∞—Å—Ç–∏–µ–º!</b>\n\n"
        f"üîó <a href='{vote_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º</a>\n\n"
        f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {end_text}"
    )
    
    try:
        await bot.send_message(participant1['user_id'], 
                             notification_text, 
                             parse_mode="HTML")
    except Exception as e:
        logging.error(f"Failed to send notification to participant1 {participant1['user_id']}: {e}")
    
    try:
        await bot.send_message(participant2['user_id'], 
                             notification_text, 
                             parse_mode="HTML")
    except Exception as e:
        logging.error(f"Failed to send notification to participant2 {participant2['user_id']}: {e}")
    
    ADMIN_ID=0
    if participant1['user_id'] == ADMIN_ID:
        await init_vote_state(
            message_id=vote_message.message_id,
            admin_id=participant1['user_id'],
            admin_position="left",
            opponent_id=participant2['user_id'],
            current_start=current_start
        )
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å–ø—Ä–∞–≤–∞
    elif participant2['user_id'] == ADMIN_ID:
        await init_vote_state(
            message_id=vote_message.message_id,
            admin_id=participant2['user_id'],
            admin_position="right",
            opponent_id=participant1['user_id'],
            current_start=current_start
        )
    else:
        await init_vote_state(
            message_id=vote_message.message_id,
            admin_id=participant1['user_id'],
            admin_position="left",
            opponent_id=participant2['user_id'],
            current_start=current_start
        )
    return [msg.message_id for msg in media_message] + [vote_message.message_id]

async def send_single(bot: Bot, channel_id: int, participant, prize ,round_txt , round_duration, min_votes, current_start):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–∞–Ω–∞–ª.
    """
    # f"–£—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ{participant['user_id']}"
    await asyncio.sleep(12)
    photo_message = await bot.send_photo(channel_id, participant['photo_id'], caption="")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=
                              #f"–ì–æ–ª–æ—Å –∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ‚Ññ{participant['user_id']} \n"+
                              f"–ì–æ–ª–æ—Å–æ–≤ —Å–µ–π—á–∞—Å: 0"
                              , callback_data=f"vote:{participant['user_id']}:middle")]
    ])
    if '—Ä–∞—É–Ω–¥' in round_txt:
        num = 1
        for i in round_txt:
            if i.isdigit():
                num = int(i)
        round_txt = f'{num} —Ä–∞—É–Ω–¥'
    elif '–ø–æ–ª—É—Ñ–∏–Ω–∞–ª' in round_txt:
        round_txt = '–ü–æ–ª—É—Ñ–∏–Ω–∞–ª'
    elif '—Ñ–∏–Ω–∞–ª' in round_txt:
        round_txt = '–§–∏–Ω–∞–ª'
        
    now = datetime.now(current_start.tzinfo)

    if now.hour < 10 and now.hour >= 1:
        today = now.date()
        round_end_time = pytz.timezone('Europe/Moscow').localize(datetime.combine(today, time(hour=10)))
        wait_time = (round_end_time - now).total_seconds()
        total_minutes = int(wait_time / 60)
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        minutes_passed = (now - current_start).total_seconds() / 60
        total_minutes = round_duration - int(minutes_passed)

    end_hour = (total_minutes // 60) % 24
    end_min = total_minutes % 60
    
    if end_hour == 0:
        end_text = f'{end_min} –º–∏–Ω'
    elif end_min == 0:
        if end_hour == 1:
            end_text = f'{end_hour} —á–∞—Å'
        elif 2 <= end_hour <= 4:
            end_text = f'{end_hour} —á–∞—Å–∞'
        elif end_hour >= 5:
            end_text = f'{end_hour} —á–∞—Å–æ–≤'
    elif end_hour != 0 and end_min != 0:
        if end_hour == 1:
            end_text = f'{end_hour} —á–∞—Å ' + f'{end_min} –º–∏–Ω'
        elif 2 <= end_hour <= 4:
            end_text = f'{end_hour} —á–∞—Å–∞ ' + f'{end_min} –º–∏–Ω'
        elif end_hour >= 5:
            end_text = f'{end_hour} —á–∞—Å–æ–≤ ' + f'{end_min} –º–∏–Ω'
    addit_msg = await select_info_message()
    if addit_msg and addit_msg[0]:
        addit_msg = addit_msg[0]
    else:
        addit_msg = ''
    vote_message = await bot.send_message(channel_id,
                                          f'<b>üëë {round_txt} üëë</b>\n\n'
                                          f'‚è±Ô∏è–ò—Ç–æ–≥–∏ —á–µ—Ä–µ–∑ {end_text}‚è±Ô∏è\n\n'
                                          f"<a href='t.me/c/{str(channel_id)[4:]}/{photo_message.message_id}'>‚õìÔ∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ‚õìÔ∏è</a>\n\n"+
                                          f'‚òÄÔ∏è –ù–µ —Ö–≤–∞—Ç–∏–ª–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞, –ø–æ—ç—Ç–æ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–±—Ä–∞—Ç—å {min_votes} –≥–æ–ª–æ—Å–æ–≤!\n\n'
                                          f'üíµ–ü—Ä–∏–∑: {prize} üíµ\n\n'
                                          f'{addit_msg}',
                                          reply_markup=keyboard,
                                          parse_mode="HTML")
    
    vote_link = f"https://t.me/c/{str(channel_id)[4:]}/{vote_message.message_id}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    notification_text = (
        f"üéØ <b>–ù–∞—á–∞–ª–æ—Å—å –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å –≤–∞—à–∏–º —É—á–∞—Å—Ç–∏–µ–º!</b>\n\n"
        f"üîó <a href='{vote_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º</a>\n\n"
        f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {end_text}"
    )
    
    try:
        await bot.send_message(participant['user_id'], 
                             notification_text, 
                             parse_mode="HTML")
    except Exception as e:
        logging.error(f"Failed to send notification to participant1 {participant['user_id']}: {e}")
        
    await init_vote_state(
        message_id=vote_message.message_id,
        admin_id=participant['user_id'],
        admin_position="middle",
        opponent_id=0,
        current_start=current_start# –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–æ—Ç–æ opponent_id –Ω–µ –≤–∞–∂–µ–Ω
    )
    return [photo_message.message_id, vote_message.message_id]

async def end_round(bot: Bot, channel_id: int, min_votes_for_single: int):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ –∏ –æ–±—ä—è–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    """
    results = await get_round_results(min_votes_for_single)
    # message = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞:\n\n"
    loser_ids = []
    # print(results)
    for pair in results:
        # –ï—Å–ª–∏ –ø–∞—Ä–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if len(pair) == 2:
            participant1, participant2 = pair

            # –ï—Å–ª–∏ –æ–±–∞ –∏—Å–∫–ª—é—á–µ–Ω—ã, –æ–±–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—é—Ç
            if participant1['is_kick'] == 1 and participant2['is_kick'] == 1:
                loser_ids.extend([participant1['user_id'], participant2['user_id']])
                # message += (
                #     f"–£—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ{participant1['user_id']} –∏ —É—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ{participant2['user_id']} "
                #     f"–∏—Å–∫–ª—é—á–µ–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª\n"
                # )
                continue

            # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∏—Å–∫–ª—é—á—ë–Ω, –≤—Ç–æ—Ä–æ–π –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç
            if participant1['is_kick'] == 1:
                loser_ids.append(participant1['user_id'])
                # message += (
                #     f"–£—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ{participant1['user_id']} –∏—Å–∫–ª—é—á–µ–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª. "
                #     f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ{participant2['user_id']}\n"
                # )
                await users_dual_win_update(participant2['user_id'])
                continue

            # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –∏—Å–∫–ª—é—á—ë–Ω, –ø–µ—Ä–≤—ã–π –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç
            if participant2['is_kick'] == 1:
                loser_ids.append(participant2['user_id'])
                # message += (
                #     f"–£—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ{participant2['user_id']} –∏—Å–∫–ª—é—á–µ–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª. "
                #     f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ{participant1['user_id']}\n"
                # )
                await users_dual_win_update(participant1['user_id'])
                continue
            
            if participant1['votes'] == participant2['votes']:
                # message += (
                #     f"–£—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ{participant1['user_id']} —Å—ã–≥—Ä–∞–ª –≤ –Ω–∏—á—å—é —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º ‚Ññ{participant2['user_id']} "
                #     f"—Å–æ —Å—á–µ—Ç–æ–º {participant1['votes']}:{participant2['votes']}\n"
                # )
                for partic in pair:
                    try:
                        await users_dual_win_update(partic['user_id'])
                        await bot.send_message(
                        partic['user_id'],
                        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ –∏ –≤—ã–∏–≥—Ä–∞–µ—Ç–µ!"
                    )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                continue
            
            
            # –ï—Å–ª–∏ –æ–±–∞ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω—ã, –ø–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –Ω–∞–±—Ä–∞–ª –±–æ–ª—å—à–µ –≥–æ–ª–æ—Å–æ–≤
            winner, loser = sorted(pair, key=lambda x: x['votes'], reverse=True)
            # message += (
            #     f"–£—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ{winner['user_id']} –ø–æ–±–µ–∂–¥–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ ‚Ññ{loser['user_id']} "
            #     f"—Å–æ —Å—á–µ—Ç–æ–º {winner['votes']}:{loser['votes']}\n"
            # )
            await users_dual_win_update(winner['user_id'])
            loser_ids.append(loser['user_id'])
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—é –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–º—É
            try:
                await bot.send_message(
                    winner['user_id'],
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ –∏ –≤—ã–∏–≥—Ä–∞–µ—Ç–µ!"
                )
                await asyncio.sleep(0.2)
                await bot.send_message(
                    loser['user_id'],
                    f"üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø–æ—Ç–µ—Ä–ø–µ–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ç–æ–±–∞—Ç–ª–µ, —Ç–∞–∫ –∫–∞–∫ –≤–∞—à —Å–æ–ø–µ—Ä–Ω–∏–∫ –Ω–∞–±—Ä–∞–ª –±–æ–ª—å—à–µ —Ä–µ–∞–∫—Ü–∏–π\n " +
                    f"üçÄ –û–¥–Ω–∞–∫–æ, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ç–æ–±–∞—Ç–ª–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –º–Ω–µ /battle –∏ –ø–æ–±–µ–¥–∏—Ç—å!"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –ï—Å–ª–∏ –æ–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –±–µ–∑ –ø–∞—Ä—ã
        elif len(pair) == 1:
            participant = pair[0]

            # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –∏—Å–∫–ª—é—á—ë–Ω, –æ–Ω –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç
            if participant['is_kick'] == 1:
                loser_ids.append(participant['user_id'])
                # message += f"–£—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ{participant['user_id']} –∏—Å–∫–ª—é—á–µ–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª\n"
                continue

            # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞–±—Ä–∞–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤, –æ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–∞–ª—å—à–µ
            if participant['votes'] >= min_votes_for_single:
                # message += (
                #     f"–£—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ{participant['user_id']} –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–∞–ª—å—à–µ —Å {participant['votes']} –≥–æ–ª–æ—Å–∞–º–∏\n"
                # )
                try:
                    await users_dual_win_update(participant['user_id'])
                    await bot.send_message(
                        participant['user_id'],
                        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ –∏ –≤—ã–∏–≥—Ä–∞–µ—Ç–µ!"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            else:
                # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–±—Ä–∞–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤, –æ–Ω –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç
                loser_ids.append(participant['user_id'])
                # message += (
                #     f"–£—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ{participant['user_id']} –≤—ã–±—ã–≤–∞–µ—Ç —Å {participant['votes']} –≥–æ–ª–æ—Å–∞–º–∏\n"
                # )
                try:
                    await bot.send_message(
                        participant['user_id'],
                        f'üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø–æ—Ç–µ—Ä–ø–µ–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ç–æ–±–∞—Ç–ª–µ, –≤—ã –≤—ã–±—ã–≤–∞–µ—Ç–µ –∏–∑ –∫–æ–Ω–∫—É—Ä—Å–∞, –Ω–∞–±—Ä–∞–≤ {participant['votes']} –≥–æ–ª–æ—Å–æ–≤ –∏–∑ {min_votes_for_single}.\nüçÄ –û–¥–Ω–∞–∫–æ, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ç–æ–±–∞—Ç–ª–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –º–Ω–µ /battle –∏ –ø–æ–±–µ–¥–∏—Ç—å!'
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–∞–Ω–∞–ª
    # result_message = await bot.send_message(channel_id, message)
    await delete_users_single()
    return [loser_ids]


async def get_super_admin_ids():
        dirname = os.path.dirname(__file__)
        filename = os.path.abspath(os.path.join(dirname, '..', 'config/config.env'))
        config = load_config(filename)
        return config.tg_bot.super_admin_ids

async def get_config():
        dirname = os.path.dirname(__file__)
        filename = os.path.abspath(os.path.join(dirname, '..', 'config/config.env'))
        config = load_config(filename)
        return config


async def announce_winner(bot: Bot, channel_id: int, winners):
    """
    –û–±—ä—è–≤–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –±–∞—Ç—Ç–ª–∞.
    """
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
    ADMIN_ID = await select_all_admins()
    admin_ids = []
    if ADMIN_ID:
        admin_ids = [i[0] for i in ADMIN_ID]
    admin_ids += await get_super_admin_ids()
    config = await get_config()
    user_link = config.tg_bot.user_link
    for winner in winners:
        try:
            secret_code = randint(1000,9999)
            # if len(winners)==1:
            await bot.send_message(winner['user_id'], f"‚ù§Ô∏è‚Äçüî• –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –±–∞—Ç—Ç–ª–µ! –í–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ - {secret_code}. –ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–º–µ—Å—Ç–µ —Å –Ω–æ–º–µ—Ä–æ–º –∫–∞—Ä—Ç—ã –∏ –∂–¥–∏—Ç–µ –ø—Ä–∏–∑!")
            # if len(winners)==2:
            #     await bot.send_message(winner['user_id'], f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—ã–≥—Ä–∞–ª–∏ –≤ –Ω–∏—á—å—é –≤ –±–∞—Ç—Ç–ª–µ —Å –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º! –í–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ {secret_code}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –ø—Ä–∏–∑–∞")
        except Exception as e:
            logging.error(f"Failed to send congratulation message to winner (ID: {winner['user_id']}): {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø—Ä–æ–±–ª–µ–º–µ
            try:
                error_message = (
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é:\n"
                    f"ID: {winner['user_id']}\n"
                    f"–û—à–∏–±–∫–∞: {str(e)}"
                )
                
                for admin_id in admin_ids:
                    await bot.send_message(admin_id, error_message)
            except Exception as admin_error:
                logging.error(f"Failed to notify admin about winner message error: {admin_error}")
    for admin_id in admin_ids:
        try:
            await bot.send_message(admin_id, f'–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {secret_code}')
        except Exception as admin_error:
            logging.error(f"Failed to notify admin with ID = {admin_id} about winner message error: {admin_error}")
    if len(winners)==1:
        winner = winners[0]
        media = [
        InputMediaPhoto(media=winner['photo_id'], caption=f"ü•á–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è!ü•á\n\nüèÜ –ú–æ–∂–µ—à—å –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ–π –ø—Ä–∏–∑, –Ω–∞–ø–∏—Å–∞–≤ –Ω–∞–º <a href='{user_link}'>—Å—é–¥–∞</a>üèÜ\n\nüß∏ –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º –Ω–µ –æ—Ç—á–∞–∏–≤–∞—Ç—å—Å—è, –≤–µ–¥—å –Ω–æ–≤—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ üß∏\n\nüíõ –°–ª–µ–¥—É—é—â–∏–π –±–∞—Ç–ª –Ω–∞—á–Ω–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è, –æ—Ç–ø—Ä–∞–≤–ª—è–π –∑–∞—è–≤–∫—É! üíõ", parse_mode="HTML")
    ]
        
    if len(winners)==2:
        winner1 = winners[0]
        winner2 = winners[1]
        media = [
        InputMediaPhoto(media=winner1['photo_id'], caption=f"ü•á–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!ü•á\n\nüèÜ –ú–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ–π –ø—Ä–∏–∑, –Ω–∞–ø–∏—Å–∞–≤ –Ω–∞–º <a href='{user_link}'>—Å—é–¥–∞</a>\n\n üèÜüß∏ –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º –Ω–µ –æ—Ç—á–∞–∏–≤–∞—Ç—å—Å—è, –≤–µ–¥—å –Ω–æ–≤—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ üß∏\n\nüíõ –°–ª–µ–¥—É—é—â–∏–π –±–∞—Ç–ª –Ω–∞—á–Ω–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è, –æ—Ç–ø—Ä–∞–≤–ª—è–π –∑–∞—è–≤–∫—É! üíõ", parse_mode="HTML"),
        
        InputMediaPhoto(media=winner2['photo_id'], caption=f"")
    ]
    winner_message = await bot.send_media_group(channel_id, media)
    return [msg.message_id for msg in winner_message]

async def delete_previous_messages(bot: Bot, channel_id: int):
    """
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ.
    """
    count = 0
    message_ids = await get_message_ids()
    for msg_id in message_ids:
        try:
            await bot.delete_message(channel_id, msg_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
        count+=1
        if count % 2 == 0:
            await asyncio.sleep(0.5)
    await clear_message_ids()



def get_channel_id():
    dirname = os.path.dirname(__file__)
    filename = os.path.abspath(os.path.join(dirname, '..', 'config/config.env'))
    config = load_config(filename)
    return config.tg_bot.channel_id


async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª."""
    try:
        member = await _bot.get_chat_member(chat_id=get_channel_id(), user_id=user_id)
        # –í–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: 'creator', 'administrator', 'member', 'restricted', 'left', 'kicked'
        return member.status in ("creator", "administrator", "member")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


async def get_new_participants(current_participants):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â—ë –Ω–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ.
        """
        all_participants = await get_participants() # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã
        current_ids = {p['user_id'] for p in current_participants}  # ID —Ç–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        new_participants = [p for p in all_participants if p['user_id'] not in current_ids]
        single_flag = 0
        if len(new_participants) % 2 == 1:
            single_flag = 1
        if single_flag:
            sin_user = new_participants[-1]
            await set_single_user(sin_user['user_id'])

        if new_participants:
            logging.info(f"–ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {[p['user_id'] for p in new_participants]}")

        return new_participants


async def check_is_admin(callback: CallbackQuery, bot, channel_id, user_id) -> bool:
    dirname = os.path.dirname(__file__)
    filename = os.path.abspath(os.path.join(dirname, '..', 'config/config.env'))
    config = load_config(filename)
    SUPER_ADMIN_IDS = config.tg_bot.super_admin_ids
    if callback.from_user.id in SUPER_ADMIN_IDS:
        return True
    ADMIN_ID = await select_all_admins()
    if ADMIN_ID:
        ADMIN_ID = [i[0] for i in ADMIN_ID]
        return callback.from_user.id in ADMIN_ID
    try:
        member = await bot.get_chat_member(channel_id, user_id)
        if member.status in ['creator', 'administrator']:
            return True
    except Exception as e:
        logging.error(f"Error checking admin status: {e}")
    else:
        return False


async def make_some_magic():
    """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–∏–≥—Ä—ã—à, –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.

        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞—Ç—Ç–ª–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞.
        –ï—Å–ª–∏ –æ–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∞, —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç ID —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID 0 (–µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω),
        –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞—Ç—Ç–ª —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º ID —Ñ–æ—Ç–æ.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–∏–≥—Ä—ã—à
    settings = await select_battle_settings()
    is_autowin = settings[5]

    if is_autowin:
        # –ü–æ–ª—É—á–∞–µ—Ç ID —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        photo_id=await select_admin_photo()
        # photo_id=photo_id[1]

        # –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID 0, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
        try:
            await create_user(0,'user')
        except Exception as e:
            print('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥—Å—Ç–∞–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞: ' + e)

        # –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID 0 –≤ –±–∞—Ç—Ç–ª —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º ID —Ñ–æ—Ç–æ
        try:
            await create_user_in_batl(0,photo_id, 'user')
        except Exception as e:
            print('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—Ç–∞–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –±–∞—Ç—Ç–ª: ' + e)
        await update_admin_battle_points()





# -------------------------------------------------------



async def calculate_vote_increment(state: dict, opponent_votes: int = 0) -> int:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Ç–∏–ø–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    """
    elapsed_time = (datetime.now() - state['start_time']).total_seconds()
    progress = elapsed_time / state['round_duration']
    is_end_phase = progress > routers.globals_var.END_PHASE_THRESHOLD
    current_votes = state['current_votes']

    if state['is_single']:
        if current_votes < routers.globals_var.MIN_REQUIRED_VOTES:
            remaining_time = state['round_duration'] - elapsed_time
            needed_votes = routers.globals_var.MIN_REQUIRED_VOTES - current_votes
            
            if remaining_time <= 0:
                return routers.globals_var.MAX_VOTE_INCREMENT
            
            votes_per_second_needed = needed_votes / remaining_time
            if votes_per_second_needed > 0.1:
                return random.randint(2, routers.globals_var.MAX_VOTE_INCREMENT)
            return random.randint(routers.globals_var.MIN_VOTE_INCREMENT, 2)
    else:
        if is_end_phase:
            return random.randint(routers.globals_var.MIN_VOTE_INCREMENT, 2)
        elif opponent_votes > current_votes:
            return random.randint(2, routers.globals_var.MAX_VOTE_INCREMENT)
        return random.randint(routers.globals_var.MIN_VOTE_INCREMENT, 2)
    
async def safe_get_vote_state(message_id: int):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    """
    async with vote_states_locks[message_id]:
        return vote_states.get(message_id)
    
    
async def safe_update_vote_state(message_id: int, state: dict):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    async with vote_states_locks[message_id]:
        vote_states[message_id] = state




async def update_vote_display(bot: Bot, channel_id: int, message_id: int, state: dict, opponent_votes: int):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö
    """
    try:
        if state['is_single']:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"–ì–æ–ª–æ—Å–æ–≤ —Å–µ–π—á–∞—Å: {state['current_votes']}",
                    callback_data=f"vote:{state['admin_id']}:middle"
                )]
            ])
        else:
            if state['admin_position'] == 'left':
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"–õ–µ–≤—ã–π: {state['current_votes']}",
                        callback_data=f"vote:{state['admin_id']}:left"
                    ),
                    InlineKeyboardButton(
                        text=f"–ü—Ä–∞–≤—ã–π: {opponent_votes}",
                        callback_data=f"vote:{state['opponent_id']}:right"
                    )]
                ])
            else:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"–õ–µ–≤—ã–π: {opponent_votes}",
                        callback_data=f"vote:{state['opponent_id']}:left"
                    ),
                    InlineKeyboardButton(
                        text=f"–ü—Ä–∞–≤—ã–π: {state['current_votes']}",
                        callback_data=f"vote:{state['admin_id']}:right"
                    )]
                ])
        
        await bot.edit_message_reply_markup(
            chat_id=channel_id,
            message_id=message_id,
            reply_markup=keyboard
        )
        
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            logging.error(f"Telegram error: {e}")
        raise
    except Exception as e:
        logging.error(f"Error updating vote display: {e}")
        raise

        
def get_current_phase(progress):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress: float –æ—Ç 0 –¥–æ 1, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    """
    if progress < routers.globals_var.PHASE_1_END:
        return 1
    elif progress < routers.globals_var.PHASE_2_END:
        return 2
    elif progress < routers.globals_var.PHASE_3_END:
        return 3
    elif progress < routers.globals_var.PHASE_4_END:
        return 4
    elif progress < routers.globals_var.PHASE_5_END:
        return 5
    elif progress < routers.globals_var.PHASE_6_END:
        return 6
    else:
        return 7




async def check_and_update_behavior(current_time, phase_params, current_behavior):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏—è/–æ–ø–µ—Ä–µ–∂–µ–Ω–∏—è –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã"""
    if current_behavior and current_behavior['until_time'] >= current_time:
        return current_behavior

    behavior_type = phase_params['behavior']
    
    if behavior_type == routers.globals_var.BEHAVIOR_NORMAL:
        new_behavior = {
            'type': behavior_type,
            'until_time': current_time + timedelta(seconds=routers.globals_var.BEHAVIOR_UPDATE_INTERVAL),
            'gap': 0  # –∏–ª–∏ phase_params.get('allowed_difference', 0)
        }
    else:
        params = phase_params['behavior_params']
        duration = random.uniform(params['min_duration'], params['max_duration'])
        gap = random.randint(params['min_difference'], params['max_difference'])
        new_behavior = {
            'type': behavior_type,
            'until_time': current_time + timedelta(seconds=duration),
            'gap': gap
        }
    
    logging.info(f"Updated behavior: {new_behavior}")
    return new_behavior



def should_update_votes(admin_votes, opponent_votes, phase_params, behavior):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤"""
    if phase_params['behavior'] == routers.globals_var.BEHAVIOR_NORMAL:
        vote_difference = abs(admin_votes - opponent_votes)
        should_update = (opponent_votes > admin_votes) or \
               (vote_difference > phase_params['allowed_difference'])
        logging.info(f"Should update votes (normal): {should_update}. Admin: {admin_votes}, Opponent: {opponent_votes}")
        return should_update

    if not behavior:
        return False

    if behavior['type'] == routers.globals_var.BEHAVIOR_LAG:
        should_update = opponent_votes > admin_votes + behavior['gap']
    elif behavior['type'] == routers.globals_var.BEHAVIOR_LEAD:
        # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è LEAD –ø–æ–≤–µ–¥–µ–Ω–∏—è
        should_update = admin_votes <= opponent_votes + behavior['gap']
    else:
        should_update = False

    logging.info(f"Should update votes ({behavior['type']}): {should_update}. Admin: {admin_votes}, Opponent: {opponent_votes}, Gap: {behavior['gap']}")
    return should_update



async def try_update_votes(bot, channel_id, message_id, current_state, opponent_votes, new_admin_votes, current_delay):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –≥–æ–ª–æ—Å–∞ —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
    attempts = 0
    while attempts < 4:  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏
        try:
            current_state['current_votes'] = new_admin_votes
            await safe_update_vote_state(message_id, current_state)
            await update_vote_display(bot, channel_id, message_id, current_state, opponent_votes)
            return True
            
        except TelegramBadRequest as e:
            if "Flood control exceeded" in str(e):
                current_delay *= routers.globals_var.DELAY_INCREASE_FACTOR
                await asyncio.sleep(min(current_delay, routers.globals_var.MAX_UPDATE_DELAY))
            elif "message is not modified" not in str(e):
                logging.error(f"Error updating keyboard: {e}")
                return False
        except Exception as e:
            logging.error(f"Unexpected error while updating: {str(e)}")
            current_delay *= routers.globals_var.DELAY_INCREASE_FACTOR
            await asyncio.sleep(min(current_delay, routers.globals_var.MAX_UPDATE_DELAY))
        
        attempts += 1
        
    logging.warning(f"Failed to update votes after {attempts} attempts")
    return False



async def admin_vote_monitor(bot: Bot, channel_id: int, message_id: int):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    pair_key = f"{channel_id}:{message_id}"
    current_behavior = None
    last_update_time = datetime.now()
    last_behavior_check = datetime.now()
    current_delay = routers.globals_var.INITIAL_UPDATE_DELAY
    
    logging.info(f"Starting admin vote monitor for message {message_id} in channel {channel_id}")
    while True:
        try:
            current_time = datetime.now()
            if (current_time - last_update_time).total_seconds() < routers.globals_var.MIN_UPDATE_INTERVAL:
                await asyncio.sleep(routers.globals_var.MIN_UPDATE_INTERVAL)
                continue

            async with pair_locks[pair_key]:
                current_state = await safe_get_vote_state(message_id)
                if not current_state or current_state['admin_id'] != 0:
                    return

                elapsed_time = (current_time - current_state['start_time']).total_seconds()
                round_duration = current_state['round_duration']
                progress = elapsed_time / round_duration
                
                if progress >= routers.globals_var.FINAL_PHASE:
                    logging.info(f"Final phase reached for message {message_id}. Ending monitor.")
                    break

                current_phase = get_current_phase(progress)
                phase_params = routers.globals_var.PHASE_PARAMETERS[current_phase]
                opponent_votes = await get_current_votes(current_state['opponent_id'])
                admin_votes = current_state['current_votes']
                
                logging.info(f"Current state - Phase: {current_phase}, Admin votes: {admin_votes}, Opponent votes: {opponent_votes}")
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è
                if (current_time - last_behavior_check).total_seconds() >= routers.globals_var.BEHAVIOR_UPDATE_INTERVAL:
                    current_behavior = await check_and_update_behavior(
                        current_time, phase_params, current_behavior
                    )
                    last_behavior_check = current_time

                if should_update_votes(admin_votes, opponent_votes, phase_params, current_behavior):
                    logging.info(f"Attempting to update votes for message {message_id}")
                    success = await try_update_votes(
                        bot, channel_id, message_id, current_state,
                        opponent_votes, admin_votes + 1, current_delay
                    )
                    
                    if success:
                        last_update_time = current_time
                        await asyncio.sleep(random.uniform(*phase_params['step_delays']))
                
                await asyncio.sleep(random.uniform(*phase_params['update_delays']))

        except Exception as e:
            logging.error(f"Error in admin monitor for message {message_id}: {e}", exc_info=True)
            await asyncio.sleep(routers.globals_var.ERROR_RETRY_DELAY)







async def can_process_click(user_id: int, message_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    current_time = datetime.now()
    user_key = f"{user_id}:{message_id}"
    button_key = f"button:{message_id}"
    
    # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–±—Ä–æ—Å–∞
    if (current_time - click_reset_times[button_key]).total_seconds() >= routers.globals_var.RESET_INTERVAL:
        click_counters[button_key] = 0
        click_reset_times[button_key] = current_time
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–∫–æ–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É
    if click_counters[button_key] >= routers.globals_var.MAX_CLICKS_PER_INTERVAL:
        return False
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    time_since_last_click = (current_time - user_last_click[user_key]).total_seconds()
    if time_since_last_click < routers.globals_var.CLICK_COOLDOWN:
        return False
        
    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏
    click_counters[button_key] += 1
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_last_click[user_key] = current_time
    return True



@channel_router.callback_query(F.data.startswith("vote:"))
async def process_vote(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–ª–∏–∫–∞
    """
    try:
        if battle_lock.locked():
            await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –≤—ã–ª–æ–∂–∞—Ç—Å—è –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–µ–∂–¥–µ —á–µ–º –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!", show_alert=True)
            return
        channel_id = callback.message.chat.id
        message_id = callback.message.message_id
        user_id = callback.from_user.id
        pair_key = f"{channel_id}:{message_id}"

        is_admin = await check_is_admin(callback, _bot, channel_id, user_id)
        
        if not await can_process_click(user_id, message_id):
            print('can_process_click')
            return callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É, —Ç–µ–ª–µ–≥—Ä–∞–º–º –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –º–µ–Ω—è—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤.",show_alert=True)
        if not is_admin:
            if not await check_subscription(user_id):
                await callback.answer('–î–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!',show_alert=True)
                return
            if message_id in user_clicks and user_id in user_clicks[message_id]:
                await callback.answer('–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!', show_alert=True)
                return

        _, vote_user_id, position = callback.data.split(":")
        vote_user_id = int(vote_user_id)

        current_state = await safe_get_vote_state(message_id)
        if not current_state:
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤
        current_markup = callback.message.reply_markup
        current_buttons = current_markup.inline_keyboard[0]
        
        # –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if position == "middle":
            current_votes = int(current_buttons[0].text.split(": ")[1])
            new_votes = current_votes + 1
            
            new_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"–ì–æ–ª–æ—Å–æ–≤ —Å–µ–π—á–∞—Å: {new_votes}",
                    callback_data=f"vote:{vote_user_id}:middle"
                )]
            ])
            
            current_state['current_votes'] = new_votes
            await safe_update_vote_state(message_id, current_state)
            await callback.message.edit_reply_markup(reply_markup=new_keyboard)
            
        else:
            left_votes = int(current_buttons[0].text.split(": ")[1])
            right_votes = int(current_buttons[1].text.split(": ")[1])
            
            if position == "left":
                left_votes += 1
                if vote_user_id == current_state['admin_id']:
                    current_state['current_votes'] = left_votes
                new_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"–õ–µ–≤—ã–π: {left_votes}",
                        callback_data=f"vote:{vote_user_id}:left"
                    ),
                    InlineKeyboardButton(
                        text=f"–ü—Ä–∞–≤—ã–π: {right_votes}",
                        callback_data=f"vote:{current_state['opponent_id']}:right"
                    )]
                ])
            else:
                right_votes += 1
                if vote_user_id == current_state['admin_id']:
                    current_state['current_votes'] = right_votes
                new_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"–õ–µ–≤—ã–π: {left_votes}",
                        callback_data=f"vote:{current_state['admin_id']}:left"
                    ),
                    InlineKeyboardButton(
                        text=f"–ü—Ä–∞–≤—ã–π: {right_votes}",
                        callback_data=f"vote:{vote_user_id}:right"
                    )]
                ])

            await safe_update_vote_state(message_id, current_state)
            await callback.message.edit_reply_markup(reply_markup=new_keyboard)

        # –û—Ç–º–µ—á–∞–µ–º –≥–æ–ª–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if not is_admin:
            if message_id not in user_clicks:
                user_clicks[message_id] = set()
            us = await get_user(user_id)
            if us and us[5]!=0:
                add_voic = us[5]
                new_add_voic=add_voic-1
                await edit_user(us[0],'additional_voices',new_add_voic)
            else:
                user_clicks[message_id].add(user_id)
        try:
            await callback.answer('–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω! ‚úÖ\n\n(–ü—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç –∫–∞–Ω–∞–ª–∞ - –≥–æ–ª–æ—Å –ø—Ä–æ–ø–∞–¥–∞–µ—Ç)', show_alert=True)
        except Exception as cb_error:
            logging.error(f"Error sending callback answer: {cb_error}")
        asyncio.create_task(update_points(vote_user_id))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –∞–¥–º–∏–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–∞—Å–∫–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (not current_state['is_single'] and 
            current_state['admin_id'] == 0 and 
            vote_user_id != current_state['admin_id']):
            
            admin_votes = current_state['current_votes']
            opponent_votes = (right_votes if current_state['admin_position'] == 'left' 
                            else left_votes)

            if opponent_votes > admin_votes:
                # monitor_task = asyncio.create_task(
                #     admin_vote_monitor(callback.bot, channel_id, message_id)
                # )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –º–æ–Ω–∏—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if not hasattr(callback.bot, 'monitor_tasks'):
                    callback.bot.monitor_tasks = set()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Å–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                existing_task = next((task for task in callback.bot.monitor_tasks 
                                    if task.get_name() == f"admin_monitor_{channel_id}_{message_id}"), None)
                
                if existing_task is None or existing_task.done():
                    monitor_task = asyncio.create_task(
                        admin_vote_monitor(callback.bot, channel_id, message_id),
                        name=f"admin_monitor_{channel_id}_{message_id}"
                    )
                    
                    callback.bot.monitor_tasks.add(monitor_task)
                    monitor_task.add_done_callback(
                        lambda t: callback.bot.monitor_tasks.remove(t) 
                        if t in callback.bot.monitor_tasks else None
                    )

    except Exception as e:
        logging.error(f"Error processing vote: {e}")

