import logging
import os
import re
import string
from typing import List
from datetime import datetime
from aiogram import Router, Bot, F
from aiogram.filters import Command, StateFilter, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from config.config import load_config

from filters.isAdmin import is_admin
from keyboards.admin_keyboards import *
from database.db import *
from routers.channel_router import delete_previous_messages, make_some_magic, get_channel_id
from states.admin_states import FSMFillForm, FSMNotification
from tasks import scheduler_manager
from utils.task_manager import TaskManagerInstance
from keyboards.user_keyboards import main_user_kb
admin_router = Router()
admin_router.message.filter(is_admin)



_bot: Bot = None

def setup_router(dp, bot: Bot):
    global _bot
    _bot = bot


async def get_config():
        dirname = os.path.dirname(__file__)
        filename = os.path.abspath(os.path.join(dirname, '..', 'config/config.env'))
        config = load_config(filename)
        return config

async def gen_mode_aplic(application):
    if application:
        user_id = application[0][0]
        user = await get_user(user_id)
        
        buttle_win = user[1]
        dual_win = user[2]
        plays_buttle = user[3]
        referals = user[4]
        additional_voices = user[5]
        
        #select photo by user_id
        
        photo_id = application[0][1]


        
        photo=photo_id,
        print(photo)
        try:
            caption=(
                    f"üõ∞ID: {user_id}\n"
                    f"üëΩ User: @{await get_username_by_id(user_id)}\n\n"
                    f"üéÆ –°—ã–≥—Ä–∞–Ω–æ —Ñ–æ—Ç–æ–±–∞—Ç–ª–æ–≤: {plays_buttle}\n"
                    f"ü•á –í—ã–∏–≥—Ä–∞–Ω–æ —Ñ–æ—Ç–æ–±–∞—Ç–ª–æ–≤: {buttle_win}\n"
                    f"‚öî –í—ã–∏–≥—Ä–∞–Ω–æ –¥—É—ç–ª–µ–π: {dual_win}\n\n"
                    f"üîë –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞: {additional_voices}\n"
                    f"üí∏ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referals}"
                )
        except Exception as e:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + e)
        reply_markup=photo_moderation_admin_kb
        return (photo[0],caption,reply_markup)


async def get_username_by_id(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID."""
    try:
        chat = await _bot.get_chat(user_id)
        return chat.username
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        return None

#####################################               –û–±—â–µ–µ                          ##########################################


@admin_router.message(Command("admin"),StateFilter(default_state))
async def cmd_admin(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –¢—ã –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.", reply_markup=get_main_admin_kb(message.from_user.id))

@admin_router.message(lambda message: message.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def photo_moderation(message: Message, state: FSMContext):
    await message.answer(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",reply_markup=main_user_kb)
    await state.clear()
    
@admin_router.message(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def photo_moderation(message: Message, state: FSMContext):
    await message.answer(text="–ù–∞–∑–∞–¥",reply_markup=get_main_admin_kb(message.from_user.id))
    await state.clear()

#########################                       –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π                ##########################################

@admin_router.message(lambda message: message.text == "üì∑ –ú–æ–¥–µ—Ä–∞—Ü–∏—è")
async def photo_moderation(message: Message):
    application = (await select_all_applications())
    if application:
        values = await gen_mode_aplic(application)
        photo = values[0]
        caption = values[1]
        reply_markup = values[2]
        await message.answer_photo(photo=photo,caption=caption, reply_markup=reply_markup)
    else:
        await message.answer(text = '–ó–∞—è–≤–æ–∫ –Ω–µ—Ç üò∂‚Äçüå´')


@admin_router.callback_query(lambda query: query.data == "–ü—Ä–∏–Ω—è—Ç—å")
async def apply(call: CallbackQuery):
    task_manager = TaskManagerInstance.get_instance()
    current_mode = await task_manager.get_current_mode()
    await call.answer(text="ok", reply_markup=mailing_admin_kb)
    application = (await select_all_applications())
    all_application = application
    delMessage = 0 if len(application) > 1 else 1
    if len(application) != 0:
        application = application[0]
        user_id = application[0]
        try:
            config = await get_config()
            channel_link = config.tg_bot.channel_link
            await _bot.send_message(user_id, text=(f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞ –∫ —É—á–∞—Å—Ç–∏—é –≤ —Ñ–æ—Ç–æ–±–∞—Ç–ª–µ! –Ø —Å–æ–æ–±—â—É –æ –Ω–∞—á–∞–ª–µ.\n\n–ö–∞–Ω–∞–ª –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: <a href='{channel_link}'>c—Å—ã–ª–∫–∞</a>"),parse_mode='HTML')
        except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        photo_id = application[1]
        ref_owner_id = (await get_user(user_id))
        if ref_owner_id:
            ref_owner_id=ref_owner_id[8]
            # print(await get_user(ref_owner_id))
            owner = await get_user(ref_owner_id)
            additional_voices_owner = owner[5]
            referals = owner[4]
            await edit_user(ref_owner_id, 'additional_voices', additional_voices_owner+3)
            await edit_user(ref_owner_id, 'referals',  referals+1)
            await edit_user(user_id, 'ref_owner', 0)
            try:
                await _bot.send_message(ref_owner_id, text=(
                    f"üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –†–µ—Ñ–µ—Ä–∞–ª –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç—Ä–∏ –≥–æ–ª–æ—Å–∞ –Ω–∞ —ç—Ç–æ—Ç –±–∞—Ç—Ç–ª.\n\n" +
                    f"ü™Ñ –í –ª—é–±–æ–º –∏–∑ —Ä–∞—É–Ω–¥–æ–≤ –±–∞—Ç—Ç–ª–∞ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è 3 —Ä–∞–∑–∞, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞. (–ì–æ–ª–æ—Å–∞ —Å–≥–æ—Ä–∞—é—Ç –≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—Ç–ª–∞, —É—Å–ø–µ–π –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)."
                    ))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        if delMessage:
            await _bot.send_message(call.from_user.id, "–ó–∞—è–≤–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üò∂‚Äçüå´")
            await call.message.delete()
        if current_mode == 1:
            await create_user_in_batl(user_id,photo_id, 'user')
        else:
            await create_user_in_buffer(user_id,photo_id, 'user')
        await delete_application(user_id)
        # /////
        if len(all_application)>1:
            values = await gen_mode_aplic(all_application[1:])
            photo = values[0]
            caption = values[1]
            reply_markup = values[2]
            await call.message.edit_media(media=InputMediaPhoto(media=photo, caption=caption), reply_markup=reply_markup)
    else:
        await _bot.send_message(call.from_user.id, "–ó–∞—è–≤–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üò∂‚Äçüå´")
    


@admin_router.callback_query(lambda query: query.data == "–û—Ç–∫–ª–æ–Ω–∏—Ç—å")
async def decline(call: CallbackQuery):
    await   call.answer(text="ok", reply_markup=mailing_admin_kb)
    application = (await select_all_applications())
    all_application = application
    delMessage = 0 if len(application) > 1 else 1
    if len(application) != 0:
        application = application[0]
        user_id = application[0]
        try:
            config = await get_config()
            rule_link = config.tg_bot.rule_link
            await _bot.send_message(user_id, text=f"‚ùå –í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ò–∑—É—á–∏—Ç–µ <a href='{rule_link}'>–ø—Ä–∞–≤–∏–ª–∞</a> –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="HTML")
        except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        if delMessage:
            await _bot.send_message(call.from_user.id, "–ó–∞—è–≤–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üò∂‚Äçüå´")
            await call.message.delete()
        await delete_application(user_id)
        if len(all_application)>1:
            values = await gen_mode_aplic(all_application[1:])
            photo = values[0]
            caption = values[1]
            reply_markup = values[2]
            await call.message.edit_media(media=InputMediaPhoto(media=photo, caption=caption), reply_markup=reply_markup)
    else:
        await _bot.send_message(call.from_user.id, "–ó–∞—è–≤–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üò∂‚Äçüå´")


@admin_router.callback_query(lambda query: query.data == "–ó–∞–±–∞–Ω–∏—Ç—å")
async def ban(call: CallbackQuery):
    await call.answer(text="ok", reply_markup=mailing_admin_kb)
    application = (await select_all_applications())
    all_application = application
    delMessage = 0 if len(application) > 1 else 1
    if len(application) != 0:
        application = application[0]
        user_id = application[0]
        if delMessage:
            await _bot.send_message(call.from_user.id, "–ó–∞—è–≤–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üò∂‚Äçüå´")
            await call.message.delete()
        await edit_user(user_id,'is_ban',1)
        await delete_application(user_id)
        if len(all_application)>1:
            values = await gen_mode_aplic(all_application[1:])
            photo = values[0]
            caption = values[1]
            reply_markup = values[2]
            await call.message.edit_media(media=InputMediaPhoto(media=photo, caption=caption), reply_markup=reply_markup)
    else:
        await _bot.send_message(call.from_user.id, "–ó–∞—è–≤–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üò∂‚Äçüå´")


####################################                    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞                      #################################


@admin_router.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics(message: Message):
    quantity_users = len(await get_all_users())
    quantity_aplic = len(await select_all_applications())
    quantity_battle = len(await select_all_battle())
    quantity_buffer = len(await get_users_in_buffer())
    
    
    task_manager = TaskManagerInstance.get_instance()
    current_mode = await task_manager.get_current_mode()
    if current_mode == 2:
        await message.answer(text=
                            f"üìä–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {quantity_users}\n\n"+
                            f"‚è≥–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {quantity_aplic}\n\n"+
                            f"‚è≥–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö: {quantity_buffer}\n\n"+
                            f"üéÆ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–∞—Ç—Ç–ª–∞: {quantity_battle}"
                            , reply_markup=get_main_admin_kb(message.from_user.id))
    else:
        await message.answer(text=
                            f"üìä–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {quantity_users}\n\n"+
                            f"‚è≥–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {quantity_aplic}\n\n"+
                            f"‚è≥–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö: {quantity_battle}"
                            , reply_markup=get_main_admin_kb(message.from_user.id))


####################################                    –û—á–∏—Å—Ç–∫–∞ –±–∞—Ç—Ç–ª–∞                      #################################


@admin_router.message(lambda message: message.text == "üí£ –û—á–∏—Å—Ç–∫–∞ –±–∞—Ç—Ç–ª–∞")
async def clear_battle(message: Message):
    channel_id = get_channel_id()
    try:
        if not scheduler_manager.task_manager.battle_active:
            users_on_battle = await select_participants_no_id_null()
            if users_on_battle:
                for user in users_on_battle:
                    await create_application(user['user_id'],user['photo_id'])
                await clear_users_in_batl()        
                await _bot.send_message(message.from_user.id,"–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–∞—Ç—Ç–ª–∞ –æ—á–∏—â–µ–Ω")
            else:
                await _bot.send_message(message.from_user.id,"–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–∞—Ç—Ç–ª–∞ —É–∂–µ –ø—É—Å—Ç")
            await _bot.send_message(message.from_user.id,"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∞—Ç—Ç–ª–∞.")
            return
        
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞—Ç—Ç–ª
        if scheduler_manager.remove_current_battle():
            # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ CancelledError
            await delete_previous_messages(message.bot, channel_id)
            
            users_on_battle = await select_participants_no_id_null()
            if users_on_battle:
                for user in users_on_battle:
                    await create_application(user['user_id'],user['photo_id'])
                await clear_users_in_batl()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            await _bot.send_message(message.from_user.id, text="–ë–∞—Ç—Ç–ª —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
            war_message = await _bot.send_message(
                channel_id,
                "‚ö†Ô∏è –ë–∞—Ç—Ç–ª –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            await save_message_ids([war_message.message_id])


        else:
            await _bot.send_message(message.from_user.id,text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞—Ç—Ç–ª.")
        

    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–∞—Ç—Ç–ª–∞: {e}"
        logging.error(error_message)
        await _bot.send_message(message.from_user.id, error_message)




####################################                    –†–∞—Å—Å—ã–ª–∫–∞                      #################################


@admin_router.message(lambda message: message.text == "‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞")
async def mailing(message: Message):
    await message.answer(text="‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞",reply_markup=mailing_admin_kb)

@admin_router.message(lambda message: message.text == "–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º" ,StateFilter(default_state))
async def mailing_everybody(message: Message, state: FSMContext):
    await message.answer(text="üåç –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",reply_markup=back_admin_kb)
    await state.set_state(FSMFillForm.fill_message_for_all)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
@admin_router.message(F.text | F.forward_from_chat, StateFilter(FSMFillForm.fill_message_for_all))
async def enter_mailing_everybody(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞
    if message.forward_from_chat and message.forward_from_message_id:
        from_chat_id = message.forward_from_chat.id  # ID –∫–∞–Ω–∞–ª–∞
        message_id = message.forward_from_message_id # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
    elif message.text:
        content = message.text
    else:
        await message.answer("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await get_all_users()  # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ [(user_id,), ...]
    users_id = [user[0] for user in users]

    # –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    for user_id in users_id:
        try:
            if message.forward_from_chat:
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
                await bot.forward_message(chat_id=user_id, from_chat_id=from_chat_id, message_id=message_id)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(chat_id=user_id, text=content, parse_mode="HTML")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!", reply_markup=mailing_admin_kb)
    await state.clear()

    
    
    
@admin_router.message(lambda message: message.text == "–£—á–∞—Å—Ç–Ω–∏–∫–∞–º, —á—å–∏ —Ñ–æ—Ç–æ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",StateFilter(default_state))
async def mailing_on_moderation(message: Message, state: FSMContext):
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",reply_markup=back_admin_kb)
    await state.set_state(FSMFillForm.fill_message_for_moder)



# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, —á—å–∏ —Ñ–æ—Ç–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
@admin_router.message(F.text | F.forward_from_chat, StateFilter(FSMFillForm.fill_message_for_moder))
async def enter_mailing_on_moderation(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, —á—å–∏ —Ñ–æ—Ç–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    if message.forward_from_chat and message.forward_from_message_id:
        from_chat_id = message.forward_from_chat.id  # ID –∫–∞–Ω–∞–ª–∞
        message_id = message.forward_from_message_id  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
    elif message.text:
        content = message.text  # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await select_all_applications()  # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ [(user_id,), ...]
    users_id = [user[0] for user in users]

    # –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    for user_id in users_id:
        try:
            if message.forward_from_chat:
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
                await bot.forward_message(chat_id=user_id, from_chat_id=from_chat_id, message_id=message_id)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(chat_id=user_id, text=content, parse_mode="HTML")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, —á—å–∏ —Ñ–æ—Ç–æ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", reply_markup=mailing_admin_kb)
    await state.clear()





@admin_router.message(lambda message: message.text == "–£—á–∞—Å—Ç–Ω–∏–∫–∞–º, –æ–∂–∏–¥–∞—é—â–∏—Ö –±–∞—Ç—Ç–ª",StateFilter(default_state))
async def mailing_active_participants(message: Message, state: FSMContext):
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",reply_markup=back_admin_kb)
    await state.set_state(FSMFillForm.fill_message_for_user_on_except)
    
# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—Ç–ª–∞ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
@admin_router.message(F.text | F.forward_from_chat, StateFilter(FSMFillForm.fill_message_for_user_on_except))
async def enter_mailing_on_battle(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—Ç–ª–∞.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    task_manager = TaskManagerInstance.get_instance()
    current_mode = await task_manager.get_current_mode()
    if message.forward_from_chat and message.forward_from_message_id:
        from_chat_id = message.forward_from_chat.id  # ID –∫–∞–Ω–∞–ª–∞
        message_id = message.forward_from_message_id  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
    elif message.text:
        content = message.text  # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if current_mode == 1:
        users = await select_all_battle()  # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ [(user_id,), ...]
        users_id = [user[0] for user in users]
    else:
        users = await get_users_in_buffer()
        users_id = [user['user_id'] for user in users] 
        

    # –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    for user_id in users_id:
        try:
            if message.forward_from_chat:
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
                await bot.forward_message(chat_id=user_id, from_chat_id=from_chat_id, message_id=message_id)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(chat_id=user_id, text=content, parse_mode="HTML")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, –æ–∂–∏–¥–∞—é—â–∏—Ö –±–∞—Ç—Ç–ª", reply_markup=mailing_admin_kb)
    await state.clear()







@admin_router.message(lambda message: message.text == "–ê–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—Ç–ª–∞",StateFilter(default_state))
async def mailing_active_participants(message: Message, state: FSMContext):
    task_manager = TaskManagerInstance.get_instance()
    current_mode = await task_manager.get_current_mode()
    if current_mode != 2:
        await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–∞—Ç—Ç–ª –Ω–µ –∏–¥—ë—Ç",reply_markup=back_admin_kb)
    else:
        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",reply_markup=back_admin_kb)
        await state.set_state(FSMFillForm.fill_message_for_user_on_battle)
    
# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—Ç–ª–∞ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
@admin_router.message(F.text | F.forward_from_chat, StateFilter(FSMFillForm.fill_message_for_user_on_battle))
async def enter_mailing_on_battle(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—Ç–ª–∞.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    task_manager = TaskManagerInstance.get_instance()
    current_mode = await task_manager.get_current_mode()
    if current_mode != 2:
        await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–∞—Ç—Ç–ª –Ω–µ –∏–¥—ë—Ç")
        return
    if message.forward_from_chat and message.forward_from_message_id:
        from_chat_id = message.forward_from_chat.id  # ID –∫–∞–Ω–∞–ª–∞
        message_id = message.forward_from_message_id  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
    elif message.text:
        content = message.text  # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await select_all_battle()  # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ [(user_id,), ...]
    users_id = [user[0] for user in users]

    # –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    for user_id in users_id:
        try:
            if message.forward_from_chat:
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
                await bot.forward_message(chat_id=user_id, from_chat_id=from_chat_id, message_id=message_id)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(chat_id=user_id, text=content, parse_mode="HTML")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—Ç–ª–∞", reply_markup=mailing_admin_kb)
    await state.clear()

    
@admin_router.message(StateFilter(FSMFillForm.fill_message_for_all))
@admin_router.message(StateFilter(FSMFillForm.fill_message_for_moder))
@admin_router.message(StateFilter(FSMFillForm.fill_message_for_user_on_battle))
async def enter_correct_data(message: Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '
             '—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å '
             '–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ - –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥"',reply_markup=mailing_admin_kb)

##############################              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏         ########################################


@admin_router.message(lambda message: message.text == "üëÆ‚Äç‚ôÇ –ê–¥–º–∏–Ω—ã",StateFilter(default_state))
async def amdin_moderation(message: Message):
    if not is_super_admin(message.from_user.id): return
    await message.answer(text="üëÆ‚Äç‚ôÇ –ê–¥–º–∏–Ω—ã",reply_markup=managing_admins_kb)

@admin_router.message(lambda message: message.text == "–ù–∞–∑–Ω–∞—á–∏—Ç—å",StateFilter(default_state))
async def enter_new_admin(message: Message, state: FSMContext):
    if not is_super_admin(message.from_user.id): return
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",reply_markup=back_admin_kb)
    await state.set_state(FSMFillForm.fill_id_of_new_admin)

@admin_router.message(StateFilter(FSMFillForm.fill_id_of_new_admin), F.text.regexp(r"^\d+$"))
async def get_new_admin(message: Message, state: FSMContext):
    if await edit_user_role(int(message.text), "admin"):
        await message.answer(text="üòé –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã",reply_markup=managing_admins_kb)
        await state.clear()
    else:
        await message.answer(text="–£–ø—Å, –ø–æ—Ö–æ–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –±–æ—Ç–∞.", reply_markup=back_admin_kb)

@admin_router.message(StateFilter(FSMFillForm.fill_id_of_new_admin))
async def get_id_of_new_admin_invalid(message: Message):
    await message.answer(text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",reply_markup=back_admin_kb)


@admin_router.message(lambda message: message.text == "C–Ω—è—Ç—å –ø—Ä–∞–≤–∞",StateFilter(default_state))
async def enter_id_of_old_admin(message: Message, state: FSMContext):
    if not is_super_admin(message.from_user.id): return
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",reply_markup=back_admin_kb)
    await state.set_state(FSMFillForm.fill_id_of_old_admin)


@admin_router.message(StateFilter(FSMFillForm.fill_id_of_old_admin), F.text.regexp(r"^\d+$"))
async def get_id_of_old_admin(message: Message, state: FSMContext):
    if await edit_user_role(int(message.text), "user"):
        await message.answer(text="üòé –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã",reply_markup=managing_admins_kb)
        await state.clear()
    else:
        await message.answer(text="–£–ø—Å, –ø–æ—Ö–æ–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –±–æ—Ç–∞.", reply_markup=back_admin_kb)

@admin_router.message(StateFilter(FSMFillForm.fill_id_of_old_admin))
async def get_id_of_old_admin_invalid(message: Message):
    await message.answer(text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",reply_markup=back_admin_kb)


##############################          –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞—Ç—Ç–ª–∞                ####################################

@admin_router.message(lambda message: message.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞—Ç—Ç–ª–∞",StateFilter(default_state))
async def battle_moderation(message: Message):
    await message.answer(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞—Ç—Ç–ª–∞",reply_markup=tune_battle_admin_kb)

@admin_router.message(lambda message: message.text == "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",StateFilter(default_state))
async def current_battle_settings(message: Message):
    settings = await select_battle_settings()
    print(settings)
    round_duration = settings[0]//60
    prize_amount = settings[1]
    min_vote_total = settings[2]
    round_interval = settings[3]//60
    start_time = settings[4]
    hours = start_time // 3600
    minutes = (start_time % 3600) // 60
    autowin = settings[5]
    if autowin == 0:
        autowin = 'Off'
    else:
        autowin = 'On'
    await message.answer(text=
                        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞—Ç—Ç–ª–∞: \n\n" 
                        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—É–Ω–¥–∞: {round_duration} –º–∏–Ω\n"+
                        f"–°—É–º–º–∞ –ø—Ä–∏–∑–∞: {prize_amount}\n"+
                        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤: {min_vote_total}\n"+
                        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ä–∞—É–Ω–¥–∞–º–∏: {round_interval} –º–∏–Ω\n"+
                        f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –±–∞—Ç—Ç–ª–∞: {hours:02d}:{minutes:02d}\n"+
                        f"–ê–≤—Ç–æ–ø–æ–±–µ–¥–∞: {autowin} ",
                         reply_markup=tune_battle_admin_kb)


@admin_router.message(lambda message: message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—É–Ω–¥–∞",StateFilter(default_state))
async def enter_duration_of_round(message: Message, state: FSMContext):
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—É–Ω–¥–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö",reply_markup=back_admin_kb)
    await state.set_state(FSMFillForm.fill_duration_of_battle)


@admin_router.message(StateFilter(FSMFillForm.fill_duration_of_battle),F.text.regexp(r"^\d+$"))
async def get_duration_of_round(message: Message, state: FSMContext):
    minutes = int(message.text)
    seconds = minutes * 60
    parametr = 'round_duration'
    await edit_battle_settings(parametr, seconds)
    await message.answer(text="üòé –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã",reply_markup=tune_battle_admin_kb)
    await state.clear()

@admin_router.message(StateFilter(FSMFillForm.fill_duration_of_battle))
async def get_duration_of_round_invalid(message: Message):
    await message.answer(text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",reply_markup=back_admin_kb)


@admin_router.message(lambda message: message.text == "–ü—Ä–∏–∑",StateFilter(default_state))
async def enter_amount_of_prize(message: Message, state: FSMContext):
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑",reply_markup=back_admin_kb)
    await state.set_state(FSMFillForm.fill_amount_of_prize)

@admin_router.message(StateFilter(FSMFillForm.fill_amount_of_prize))
async def get_amount_of_prize(message: Message, state: FSMContext):
    value = str(message.text)
    parametr = 'prize_amount'
    await edit_battle_settings(parametr, value)
    await message.answer(text="üòé –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã",reply_markup=tune_battle_admin_kb)
    await state.clear()

@admin_router.message(StateFilter(FSMFillForm.fill_amount_of_prize))
async def get_amount_of_prize_invalid(message: Message):
    await message.answer(text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",reply_markup=back_admin_kb)



@admin_router.message(lambda message: message.text == "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤",StateFilter(default_state))
async def enter_minimal_number_of_votes(message: Message, state: FSMContext):
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤",reply_markup=back_admin_kb)
    await state.set_state(FSMFillForm.fill_minimal_number_of_votes)

@admin_router.message(StateFilter(FSMFillForm.fill_minimal_number_of_votes),F.text.regexp(r"^\d+$"))
async def get_minimal_number_of_votes(message: Message, state: FSMContext):
    value = int(message.text)
    parametr = 'min_vote_total'
    await edit_battle_settings(parametr, value)
    await message.answer(text="üòé –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã",reply_markup=tune_battle_admin_kb)
    await state.clear()

@admin_router.message(StateFilter(FSMFillForm.fill_minimal_number_of_votes))
async def get_minimal_number_of_votes_invalid(message: Message):
    await message.answer(text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",reply_markup=back_admin_kb)


@admin_router.message(lambda message: message.text == "–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ä–∞—É–Ω–¥–∞–º–∏",StateFilter(default_state))
async def enter_interval_between_rounds(message: Message, state: FSMContext):
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ä–∞—É–Ω–¥–∞–º–∏",reply_markup=back_admin_kb)
    await state.set_state(FSMFillForm.fill_interval_between_battles)

@admin_router.message(StateFilter(FSMFillForm.fill_interval_between_battles),F.text.regexp(r"^\d+$"))
async def get_interval_between_rounds(message: Message, state: FSMContext):
    minutes = int(message.text)
    seconds = minutes * 60
    parametr = 'round_interval'
    await edit_battle_settings(parametr, seconds)
    await message.answer(text="üòé –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã",reply_markup=tune_battle_admin_kb)
    await state.clear()

@admin_router.message(StateFilter(FSMFillForm.fill_interval_between_battles))
async def get_interval_between_rounds_invalid(message: Message):
    await message.answer(text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",reply_markup=back_admin_kb)



@admin_router.message(lambda message: message.text == "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –±–∞—Ç—Ç–ª–∞",StateFilter(default_state))
async def enter_start_time_of_battle(message: Message, state: FSMContext):
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –±–∞—Ç—Ç–ª–∞ –ø–æ –ú–°–ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ hh:mm",reply_markup=back_admin_kb)
    await state.set_state(FSMFillForm.fill_start_time_of_battle)

@admin_router.message(StateFilter(FSMFillForm.fill_start_time_of_battle),F.text.regexp(r'^([01]?[0-9]|2[0-3]):([0-5][0-9])$'))
async def get_start_time_of_battle(message: Message, state: FSMContext):
    match = re.match(r'^([01]?[0-9]|2[0-3]):([0-5][0-9])$', message.text)
    hours, minutes = map(int, match.groups())
    seconds = hours * 60 * 60 + minutes * 60
    parametr = 'time_of_run'
    await edit_battle_settings(parametr, seconds)
    await message.answer(text="üòé –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã",reply_markup=tune_battle_admin_kb)
    await state.clear()

@admin_router.message(StateFilter(FSMFillForm.fill_start_time_of_battle))
async def get_start_time_of_battle_invalid(message: Message):
    await message.answer(text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",reply_markup=back_admin_kb)

@admin_router.message(lambda message: message.text == "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–±–µ–¥–∞",StateFilter(default_state))
async def enter_autowin(message: Message, state: FSMContext):
    await message.answer(text="ü•∑ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–≤—ã–∏–≥—Ä—ã—à, –Ω–∞–ø–∏—à–∏ y - –µ—Å–ª–∏ –¥–∞, n - –µ—Å–ª–∏ –Ω–µ—Ç!",reply_markup=back_admin_kb)
    await state.set_state(FSMFillForm.fill_autowin_state)

@admin_router.message(StateFilter(FSMFillForm.fill_autowin_state),F.text.regexp(r'^[yYnN]$'))
async def get_autowin(message: Message, state: FSMContext):
    req=message.text.lower()
    if req == 'y':
        await edit_battle_settings("is_autowin", 1)
        await make_some_magic()
    else:
        await edit_battle_settings("is_autowin", 0)
        await delete_user_in_batl(0)
    await message.answer(text="üòé –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã",reply_markup=tune_battle_admin_kb)
    await state.clear()

@admin_router.message(StateFilter(FSMFillForm.fill_autowin_state))
async def get_autowin_invalid(message: Message):
    await message.answer(text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",reply_markup=back_admin_kb)



#@admin_router.message()

# --------------

@admin_router.message(F.text == "üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
async def participiants_of_current_battle(message: Message):
    users_on_battle = await select_all_battle()
    if users_on_battle:
        text = ''
        for i in users_on_battle:
            user_id = i[0]
            try:
                username = await get_username_by_id(user_id)
            except Exception as e:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞:", e)
            command = f'/prof{user_id}'
            text += f'ID: {user_id}, –Ω–∏–∫: @{username}, –∞–Ω–∫–µ—Ç–∞: {command}\n'
        await message.answer(text=text)
    else:
        await message.answer(text='–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç')

# –ö–æ–º–∞–Ω–¥–∞ /prof —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º telegram_id
@admin_router.message(F.text.regexp(r'^/prof(\d+)$'))
async def handle_prof_command(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    match = re.match(r'^/prof(\d+)$', message.text)
    telegram_id = match.group(1)  # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    
    try:
        user_id = int(telegram_id)
        user_on_battle = await select_user_on_battle(user_id)
        if user_on_battle:
            user = await get_user(user_id)
            buttle_win = user[1]
            dual_win = user[2]
            plays_buttle = user[3]
            referals = user[4]
            additional_voices = user[5]

            photo_id = user_on_battle[1]
            photo = photo_id

            try:
                caption = (
                    f"üõ∞ID: {user_id}\n"
                    f"üëΩ User: @{await get_username_by_id(user_id)}\n\n"
                    f"üéÆ –°—ã–≥—Ä–∞–Ω–æ —Ñ–æ—Ç–æ–±–∞—Ç–ª–æ–≤: {plays_buttle}\n"
                    f"ü•á –í—ã–∏–≥—Ä–∞–Ω–æ —Ñ–æ—Ç–æ–±–∞—Ç–ª–æ–≤: {buttle_win}\n"
                    f"‚öî –í—ã–∏–≥—Ä–∞–Ω–æ –¥—É—ç–ª–µ–π: {dual_win}\n\n"
                    f"üîë –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞: {additional_voices}\n"
                    f"üí∏ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referals}"
                )
            except Exception as e:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞:", e)
                caption = (
                    f"üõ∞ID: {user_id}\n\n"
                    f"üéÆ –°—ã–≥—Ä–∞–Ω–æ —Ñ–æ—Ç–æ–±–∞—Ç–ª–æ–≤: {plays_buttle}\n"
                    f"ü•á –í—ã–∏–≥—Ä–∞–Ω–æ —Ñ–æ—Ç–æ–±–∞—Ç–ª–æ–≤: {buttle_win}\n"
                    f"‚öî –í—ã–∏–≥—Ä–∞–Ω–æ –¥—É—ç–ª–µ–π: {dual_win}\n\n"
                    f"üîë –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞: {additional_voices}\n"
                    f"üí∏ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referals}"
                )

            await message.answer_photo(photo=photo, caption=caption, reply_markup=kick_user_kb)
        else:
            await message.answer(text="–ò–≥—Ä–æ–∫ —Å —ç—Ç–∏–º ID –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –±–∞—Ç—Ç–ª–µ")
    except ValueError:
        await message.reply("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")

@admin_router.callback_query(lambda c: c.data == "kick")
async def process_kick_button(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = callback.message.caption
    user_id = int(text.split('\n')[0].split(': ')[1])
    
    await callback.message.edit_caption(
        caption=f"{callback.message.caption}\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫–∏–∫–Ω—É—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
        reply_markup=confirm_kick_kb
    )
    await callback.answer()

@admin_router.callback_query(lambda c: c.data == "confirm_kick")
async def process_confirm_kick(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = callback.message.caption
    user_id = int(text.split('\n')[0].split(': ')[1])
    
    try:
        task_manager = TaskManagerInstance.get_instance()
        current_mode = await task_manager.get_current_mode()
        if current_mode != 1:
            await kick_user_battle(user_id)
            
            await callback.message.edit_caption(
                caption=f"{callback.message.caption}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∫–∏–∫–Ω—É—Ç –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞—Ç—Ç–ª–∞ –≤ –∫–æ–Ω—Ü–µ 1 —Ä–∞—É–Ω–¥–∞!",
                reply_markup=None
            )
        else:
            await delete_user_in_batl(user_id)

            await callback.message.edit_caption(
                caption=f"{callback.message.caption}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞—Ç—Ç–ª–∞!",
                reply_markup=None
            )
            
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}", show_alert=True)

@admin_router.callback_query(lambda c: c.data == "cancel_kick")
async def process_cancel_kick(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=kick_user_kb)
    await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@admin_router.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
async def start_adding_channel(message: Message, state: FSMContext):
    await message.answer("üôÉ –í–≤–µ–¥–∏—Ç–µ –ù–ê–ó–í–ê–ù–ò–ï –∫–∞–Ω–∞–ª–∞:")
    await state.set_state(FSMFillForm.add_channel_name)
    
@admin_router.message(FSMFillForm.add_channel_name)
async def process_channel_name(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
    if not message.text or len(message.text) < 3:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(channel_name=message.text)
    await message.answer("üîó –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:")
    await state.set_state(FSMFillForm.add_channel_link)


@admin_router.message(FSMFillForm.add_channel_link)
async def process_channel_link(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
    if not re.match(r'^https?://', message.text):
        await message.answer("–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    channel_name = data.get("channel_name")
    channel_link = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        await add_channel_to_db(channel_name, channel_link)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î
        await message.answer(f"–ö–∞–Ω–∞–ª <b>{channel_name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode="HTML")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")
        logging.error(f"Error adding channel: {e}")

    # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

@admin_router.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")
async def start_deleting_channel(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(FSMFillForm.delete_channel_name)


@admin_router.message(FSMFillForm.delete_channel_name)
async def process_channel_deletion(message: Message, state: FSMContext):
    channel_name = message.text

    try:
        # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        success = await delete_channel_from_db(channel_name)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î

        if success:
            await message.answer(f"–ö–∞–Ω–∞–ª <b>{channel_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", parse_mode="HTML")
        else:
            await message.answer(f"–ö–∞–Ω–∞–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>{channel_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")
        logging.error(f"Error deleting channel: {e}")

    # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()




@admin_router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –ø–æ—Å—Ç—É")
async def add_info_command(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=battle_info_kb)

@admin_router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def change_info_command(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]],
        resize_keyboard=True
    ))
    await state.set_state(FSMFillForm.waiting_for_text)

@admin_router.message(FSMFillForm.waiting_for_text)
async def process_battle_info(message: Message, state: FSMContext):
    # if message.text == "–ù–∞–∑–∞–¥ –≤ –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
    #     await state.clear()
    #     await message.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–∞—Ç—Ç–ª–∞", reply_markup=tune_battle_admin_kb)
    #     return
    
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    await update_info_message(message.text)
    
    await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=tune_battle_admin_kb)
    await state.clear()
    
@admin_router.message(F.text == "–ù–∞–∑–∞–¥ –≤ –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
async def process_battle_info_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–∞—Ç—Ç–ª–∞", reply_markup=tune_battle_admin_kb)
    return

@admin_router.message(F.text == "–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def delete_info_command(message: Message):
    await delete_info_message()
    await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!", reply_markup=tune_battle_admin_kb)

@admin_router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def view_info_command(message: Message):
    result = await select_info_message()
    
    if result and result[0]:
        await message.answer(f"–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{result[0]}")
    else:
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ")





@admin_router.message(F.text == "–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ñ–æ—Ç–æ")
async def back_to_settings_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ñ–æ—Ç–æ", reply_markup=admin_photo_keyboard)


@admin_router.message(F.text == "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–¥–º–∏–Ω–∞")
async def admin_photos_menu(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_photo_keyboard)


@admin_router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
async def add_photos_start(message: Message, state: FSMContext):
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 30 –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ä–∞–∑–æ–º. –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.",
        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ñ–æ—Ç–æ")]], resize_keyboard=True)
    )
    await state.set_state(FSMFillForm.waiting_for_photos)



@admin_router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
async def add_photos_start(message: Message, state: FSMContext):
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 30 –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ä–∞–∑–æ–º. –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.",
        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ñ–æ—Ç–æ")]], resize_keyboard=True)
    )
    await state.set_state(FSMFillForm.waiting_for_photos)


@admin_router.message(FSMFillForm.waiting_for_photos, F.photo)
async def process_photos(message: Message, state: FSMContext, **kwargs):
    album = kwargs.get('album')  # –ü–æ–ª—É—á–∞–µ–º –∞–ª—å–±–æ–º –∏–∑ kwargs
    
    if album:  # –ï—Å–ª–∏ —ç—Ç–æ –∞–ª—å–±–æ–º
        if len(album) > 30:
            await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 30 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞ —Ä–∞–∑")
            return

        valid_photos = []
        skipped = 0

        for msg in album:
            photo = msg.photo[-1]
            if photo.width < photo.height:
                valid_photos.append(photo.file_id)
            else:
                skipped += 1

        if valid_photos:
            await save_admin_photo_two(valid_photos)  # –¢–µ–ø–µ—Ä—å valid_photos –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            response = f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(valid_photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"
            if skipped > 0:
                response += f"\n–ü—Ä–æ–ø—É—â–µ–Ω–æ {skipped} –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"
            await message.answer(response)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ.")

    else:  # –ï—Å–ª–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        if photo.width < photo.height:
            await save_admin_photo(photo.file_id)
            await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        else:
            await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π")



            
            
@admin_router.message(FSMFillForm.waiting_for_photos)
async def error_multiple_photos(message: Message, state: FSMContext):
    await message.answer(
        text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '
             '–≤–∞—à–µ —Ñ–æ—Ç–æ\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å '
             '–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ñ–æ—Ç–æ"'    )


@admin_router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
async def delete_first_photo_handler(message: Message):
    photo_id = await select_admin_photo()
    if photo_id:
        await message.answer(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å ID {photo_id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await message.answer("–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        
        
@admin_router.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
async def view_first_photo_handler(message: Message):
    photo_id = await get_first_photo()
    if photo_id:
        await message.answer_photo(photo_id, caption="–°–∞–º–∞—è –ø–µ—Ä–≤–∞—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è.")
    else:
        await message.answer("–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")




@admin_router.message(F.text == "–í—ã–ª–æ–∂–∏—Ç—å –¥–æ–Ω–∞–±–æ—Ä")
async def add_participants_from_buffer_to_battle(message: Message):
    users_buffer = await get_users_in_buffer()
    if users_buffer:
        for user in users_buffer:
            await create_user_in_batl(user['user_id'],user['photo_id'], 'user')
        await message.answer("–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞—Ç—Ç–ª")
        await delete_users_in_buffer()
    else:
        await message.answer("–ù–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞—Ç—Ç–ª")
        
        
        
@admin_router.message(lambda message: message.text == "üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def mailing(message: Message):
    await message.answer(text="üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",reply_markup=get_admin_keyboard_notif())


async def generate_unique_code():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ 4-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞"""
    while True:
        code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
        if not await check_notification_code_exists(code):
            return code

@admin_router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
async def add_notification_start(message: Message, state: FSMContext):
    try:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:"
        )
        await state.set_state(FSMNotification.waiting_for_message)
    except Exception as e:
        logging.error(f"Error in add_notification_start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@admin_router.message(StateFilter(FSMNotification.waiting_for_message))
async def process_notification_message(message: Message, state: FSMContext):
    try:
        await state.update_data(message=message.text)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):"
        )
        await state.set_state(FSMNotification.waiting_for_time)
    except Exception as e:
        logging.error(f"Error in process_notification_message: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@admin_router.message(StateFilter(FSMNotification.waiting_for_time))
async def process_notification_time(message: Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        time_str = message.text
        time_obj = datetime.strptime(time_str, "%H:%M").time()
        
        data = await state.get_data()
        notification_message = data['message']
        code = await generate_unique_code()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –ª–æ–≥
        logging.info(f"Adding notification: {code} - {notification_message} - {time_str}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î
        await add_notification(code, notification_message, time_str)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –ª–æ–≥
        logging.info(f"Scheduling notification: {code} - {notification_message} - {time_obj}")
        
        await scheduler_manager.add_notification_job(code, notification_message, time_obj)
        await message.answer(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            f"üìù –ö–æ–¥: {code}\n"
            f"‚è∞ –í—Ä–µ–º—è: {message.text}\n"
            f"üìú –¢–µ–∫—Å—Ç: {notification_message}\n\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_admin_keyboard_notif()
        )
        await state.clear()
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú"
        )
    except Exception as e:
        logging.error(f"Error in process_notification_time: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@admin_router.message(F.text == "–°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
async def view_notifications(message: Message):
    try:
        notifications = await get_all_notifications()
        if not notifications:
            await message.answer(
                "üìù –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—É—Å—Ç",
                reply_markup=get_admin_keyboard_notif()
            )
            return

        text = "üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
        for notif in notifications:
            text += f"üîπ –ö–æ–¥: {notif[1]}\n"
            text += f"‚è∞ –í—Ä–µ–º—è: {notif[3]}\n"
            text += f"üìú –¢–µ–∫—Å—Ç: {notif[2]}\n"
            text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

        await message.answer(
            text,
            reply_markup=get_notifications_keyboard()
        )
    except Exception as e:
        logging.error(f"Error in view_notifications: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@admin_router.message(F.text == "–£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
async def delete_notification_start(message: Message, state: FSMContext):
    try:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:"
        )
        await state.set_state(FSMNotification.waiting_for_code)
    except Exception as e:
        logging.error(f"Error in delete_notification_start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@admin_router.message(StateFilter(FSMNotification.waiting_for_code))
async def delete_notifications(message: Message, state: FSMContext):
    try:
        code = message.text
        notification = await get_notification_by_code(code)
        if notification:
            await delete_notification(code)
            await scheduler_manager.remove_notification_job(code)
            await message.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º {code} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            await message.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º {code} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
    except Exception as e:
        logging.error(f"Error deleting notification: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


