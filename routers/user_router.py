import logging
from aiogram import F, Router, Bot
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import Message, MessageOriginChannel, PhotoSize
from aiogram.utils.deep_linking import create_start_link, decode_payload
from config.config import load_config
from database.db import *
from keyboards.user_keyboards import main_user_kb, vote_user_kb, support_user_kb
from keyboards.admin_keyboards import *

from filters.mode_filter import mode_filter
from states.user_states import FSMFillForm
from filters.isAdmin import is_admin
from keyboards import user_keyboards

_bot: Bot = None

def setup_router(dp, bot: Bot):
    global _bot
    _bot = bot


user_router = Router()


async def get_config():
        dirname = os.path.dirname(__file__)
        filename = os.path.abspath(os.path.join(dirname, '..', 'config/config.env'))
        config = load_config(filename)
        return config
    
#-----------
# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@user_router.message(mode_filter(1,2), CommandStart() ,StateFilter(default_state))
async def cmd_start(message: Message,state: FSMContext,command: Command):
    # –¥–µ–∫–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤ –±–¥
    args = message.text.split()[1] if len(message.text.split()) > 1 else None
    if args:
            payload = decode_payload(args)
            referrer_id = int(payload)
            user_id = message.from_user.id
            if (user_id != referrer_id) and not (await get_user(user_id)):
                await create_user(user_id, "user")
                await edit_user(user_id, 'ref_owner', referrer_id)
    else:
        await create_user(message.from_user.id, "user")
    config = await get_config()
    channel_link = config.tg_bot.channel_link
    welcome_text = (
        "‚≠êÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é!\n\n"
        "‚ú® –ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–∞—Ç—Ç–ª–µ, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ /battle "
        "–∏–ª–∏ –Ω–∞–∂–∞—Ç—å \"üî•–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ\"!\n\n"
        "üí´ –∫–∞–Ω–∞–ª –≥–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –§–ë:\n"
        f"{channel_link}\n\n"
        "üîî –û—á–µ–Ω—å –∂–¥–µ–º —Ç–≤–æ–µ–π –∑–∞—è–≤–∫–∏!"
    )
    
    await message.reply(welcome_text, reply_markup=main_user_kb)


@user_router.message(Command("battle"), StateFilter(default_state))
@user_router.message(F.text=="üî•–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ",StateFilter(default_state))
async def cmd_battle(message: Message, state: FSMContext):
    user_id = message.from_user.id
    application = await select_application(user_id)
    user_on_battle = await select_user_on_battle(user_id)
    if not application and not user_on_battle:
        await message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å–≤–æ—é —Ñ–æ—Ç–∫—É. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π!\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel")
        await state.set_state(FSMFillForm.fill_photo)
    elif application:
        await message.answer("üîç –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ!")
    else:
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –±–∞—Ç—Ç–ª.")



@user_router.message(StateFilter(FSMFillForm.fill_photo), F.photo[-1].as_('largest_photo'))
async def process_photo_sent(message: Message, state: FSMContext, largest_photo: PhotoSize):
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    width = largest_photo.width
    height = largest_photo.height

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π
    if height > width:
        await state.update_data(
            photo_unique_id=largest_photo.file_unique_id,
            photo_id=largest_photo.file_id
        )
        data = await state.get_data()

        await message.answer(
            text='üîç –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ!'
        )
        await create_application(message.from_user.id, data["photo_id"])
        await state.clear()
    else:
        await message.answer(
            text='‚ùóÔ∏è–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞,–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –æ–±—Ä–µ–∂—å—Ç–µ —ç—Ç—É.\n\n'
                '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel'
        )



@user_router.message(StateFilter(FSMFillForm.fill_photo))
async def warning_not_photo(message: Message):
    await message.answer(
        text='üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ!\n\n'
             '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel'
    )


@user_router.message(lambda message: message.text == "‚ö°Ô∏è–ü–æ–¥–¥–µ—Ä–∂–∫–∞", StateFilter(default_state))
async def support(message: Message, state: FSMContext):
    await message.answer(
        text=
        '‚úâÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.',
        reply_markup=support_user_kb
    )

@user_router.message(lambda message: message.text == "üéóÔ∏è–ü—Ä–æ—Ñ–∏–ª—å", StateFilter(default_state))
async def profile(message: Message, state: FSMContext):
    
    user = await get_user(message.from_user.id)
    
    buttle_win = user[1]
    dual_win = user[2]
    plays_buttle = user[3]
    referals = user[4]
    additional_voices = user[5]
    
    await message.answer(
        text=
        f"üõ∞ ID: <code>{message.from_user.id}</code>\n"+
        f"üëΩ User: @{message.from_user.username}\n\n"+
        f"üéÆ –°—ã–≥—Ä–∞–Ω–æ —Ñ–æ—Ç–æ–±–∞—Ç–ª–æ–≤: {plays_buttle} \n"+
        f"ü•á –í—ã–∏–≥—Ä–∞–Ω–æ —Ñ–æ—Ç–æ–±–∞—Ç–ª–æ–≤: {buttle_win} \n"+
        f"‚öî –í—ã–∏–≥—Ä–∞–Ω–æ –¥—É—ç–ª–µ–π: {dual_win}\n\n"+
        f"üîë –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞: {additional_voices}\n"
        f"üí∏ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referals}"
    ,parse_mode='HTML')
    
# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–∫ 
@user_router.message(lambda message: message.text == "üç™–ü–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–∞", StateFilter(default_state))
async def mt_referal_menu (message: Message, state: FSMContext, bot: Bot):
    link = await create_start_link(bot,str(message.from_user.id), encode=True)
    await message.answer(
        text=f'üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ - –ø–æ–ª—É—á–∏ –≥–æ–ª–æ—Å–∞!\n\n' +
             f'üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link}\n\n' +
             f'üîë 3 –≥–æ–ª–æ—Å–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –ø—Ä–∏–≤–µ–ª–∏, –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ñ–æ—Ç–æ –∏ –æ–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç–æ.'
    )
    

@user_router.message(lambda message: message.text == "‚ú®–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ —Å–ø–æ–Ω—Å–æ—Ä—ã")
async def show_channels_for_admin(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        channels = await get_channels_from_db()  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
        if not channels:
            if (await is_admin(message)):
                await message.answer(text="ü•≤ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç.",reply_markup=admin_channel_keyboard)
            else:
                await message.answer("ü•≤ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç.")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = "‚ú® –ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ —Å–ø–æ–Ω—Å–æ—Ä—ã ‚ú®:\n\n"
        for channel in channels:
            response += f"üîó <b>{channel['name']}</b>: <a href='{channel['link']}'>—Å—Å—ã–ª–∫–∞</a>\n"
        if (await is_admin(message)):
            await message.answer(response, parse_mode="HTML",reply_markup=admin_channel_keyboard)
        else:
            await message.answer(response, parse_mode="HTML")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤.")
        logging.error(f"Error in show_channels: {e}")




@user_router.message()
async def echo(message: Message):
    await message.answer('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üòÖ\n\n'
                        '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –±–∞—Ç—Ç–ª –Ω–∞–∂–º–∏—Ç–µ /battle')


