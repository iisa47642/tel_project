import asyncio
from aiogram import BaseMiddleware, Bot
from typing import Callable, Dict, Any, Awaitable, Union
from aiogram.types import Message, CallbackQuery, TelegramObject
from database.db import get_user, select_battle_settings
from datetime import datetime, time, timedelta
import pytz
import logging
from tasks.task_handlers import TaskManager

class MiddlewareData:
    _bot: Bot = None
    _task_manager: TaskManager = None

def setup_router(dp, bot: Bot, tm: TaskManager):
    MiddlewareData._bot = bot
    MiddlewareData._task_manager = tm


class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, limit=1):
        self.rate_limit = limit
        self.user_timeouts = {}

    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        user_id = event.from_user.id

        if user_id in self.user_timeouts:
            last_time = self.user_timeouts[user_id]
            if datetime.now() - last_time < timedelta(seconds=self.rate_limit):
                return

        self.user_timeouts[user_id] = datetime.now()
        return await handler(event, data)

class UserCheckMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        try:
            user_id = event.from_user.id
        except Exception as e:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + e)
        existing_user = await get_user(user_id=user_id)

        if not existing_user and event.text != '/start':
            await event.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")
            return

        return await handler(event, data)

class ModeMiddleware(BaseMiddleware):
    def __init__(self) -> None:
        self.previous_mode = None
        super().__init__()

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any],
    ) -> Any:
        try:
            if not MiddlewareData._task_manager:
                logging.error("TaskManager not initialized in middleware")
                return await handler(event, data)

            current_mode = await MiddlewareData._task_manager.get_current_mode()
            
            if self.previous_mode != current_mode:
                await self.notify_mode_change(current_mode)
                self.previous_mode = current_mode

            data['current_mode'] = current_mode

            logging.info(f"Request processed in mode {current_mode}")

            return await handler(event, data)

        except Exception as e:
            logging.error(f"Error in middleware: {e}")
            return await handler(event, data)

    async def notify_mode_change(self, new_mode: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞"""
        if not MiddlewareData._bot:
            logging.error("Bot not initialized in middleware")
            return

        mode_descriptions = {
            1: "–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∞—Ç—Ç–ª–∞",
            2: "–ø–µ—Ä–∏–æ–¥ –¥–æ–Ω–∞–±–æ—Ä–∞ (1.5 —á–∞—Å–∞)",
            3: "–∞–∫—Ç–∏–≤–Ω—ã–π –±–∞—Ç—Ç–ª"
        }
        
        if self.previous_mode is not None and self.previous_mode != new_mode:
            message = (
                f"üîÑ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑–º–µ–Ω–µ–Ω\n"
                f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∂–∏–º: {self.previous_mode} ({mode_descriptions[self.previous_mode]})\n"
                f"–ù–æ–≤—ã–π —Ä–µ–∂–∏–º: {new_mode} ({mode_descriptions[new_mode]})"
            )
            
            admin_id = 842589261
            try:
                await MiddlewareData._bot.send_message(admin_id, message)
                logging.info(f"Mode changed from {self.previous_mode} to {new_mode}")
            except Exception as e:
                logging.error(f"Failed to send mode change notification: {e}")
