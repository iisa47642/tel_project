# tasks/task_handlers.py
from datetime import datetime, time, timedelta
import logging
import os
from random import randint
from aiogram import Bot
from typing import Optional
import asyncio
from math import log
import pytz

from routers.channel_router import make_some_magic, send_battle_pairs, end_round, announce_winner, delete_previous_messages, get_new_participants
from database.db import clear_users_in_batl, create_user_in_batl, delete_users_add_voices, delete_users_in_buffer, get_participants, get_users_in_buffer, remove_losers, save_message_ids, delete_users_in_batl, select_all_admins, select_battle_settings, delete_users_points, swap_user_position, swap_user_position_first, update_admin_battle_points, update_points,users_plays_buttle_update,users_buttle_win_update

from config.config import load_config
from routers.channel_router import send_battle_pairs, end_round, announce_winner, delete_previous_messages
from database.db import get_participants, remove_losers, save_message_ids, delete_users_in_batl,get_all_users
from routers.globals_var import reset_vote_states
class TaskManager:
    def __init__(self):
        self._bot: Optional[Bot] = None
        self.channel_id: int = self.get_channel_id()
        self.round_duration: int = None #15
        self.break_duration: int = None #30
        self.min_votes_for_single: int = None  # –ú–∏–Ω–∏–º—É–º –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        self.notification_task = None
        self.battle_task = None
        self.battle_active = False
        self.first_round_active = False
        self.current_round_start = None
        self.next_battle_start = None
        self.timezone = pytz.timezone('Europe/Moscow')
        self.DEFAULT_BATTLE_TIME = None
        self.prize = None

    async def initialize(self):
    # """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        BATTLE_SETTINGS = await select_battle_settings()
        hours = BATTLE_SETTINGS[4] // 3600
        minutes = (BATTLE_SETTINGS[4] % 3600) // 60
        self.DEFAULT_BATTLE_TIME = time(hour=int(hours), minute=int(minutes))
        self.round_duration = BATTLE_SETTINGS[0]//60
        self.break_duration = BATTLE_SETTINGS[3]//60
        self.min_votes_for_single = BATTLE_SETTINGS[2]
        self.prize = BATTLE_SETTINGS[1]
    @property
    def bot(self) -> Bot:
        return self._bot

    @bot.setter
    def bot(self, bot: Bot):
        self._bot = bot


    async def get_current_mode(self) -> int:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        Returns:
            1 - –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∞—Ç—Ç–ª–∞
            2 - –ø–µ—Ä–∏–æ–¥ –¥–æ–Ω–∞–±–æ—Ä–∞ (—Å –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –¥–æ 30 –º–∏–Ω—É—Ç –¥–æ –µ–≥–æ –∫–æ–Ω—Ü–∞)
            3 - –∞–∫—Ç–∏–≤–Ω—ã–π –±–∞—Ç—Ç–ª
        """
        TIMEZONE = pytz.timezone('Europe/Moscow')
        now = datetime.now(TIMEZONE)

        # –ï—Å–ª–∏ –±–∞—Ç—Ç–ª –∞–∫—Ç–∏–≤–µ–Ω
        if self.battle_active:
            # if self.first_round_active and self.current_round_start:
                # –ü–µ—Ä–∏–æ–¥ –¥–æ–Ω–∞–±–æ—Ä–∞: –æ—Ç –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞ –¥–æ 30 –º–∏–Ω—É—Ç –¥–æ –µ–≥–æ –∫–æ–Ω—Ü–∞
                # round_end = self.current_round_start + timedelta(minutes=self.round_duration)
                # donabor_end = round_end - timedelta(seconds=30)
                # donabor_end = round_end - timedelta(minutes=30)
                # if now < donabor_end:
                #     return 2
            return 2

        # –ï—Å–ª–∏ –±–∞—Ç—Ç–ª –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω - —Ä–µ–∂–∏–º 1
        return 1

    async def get_config(self):
        dirname = os.path.dirname(__file__)
        filename = os.path.abspath(os.path.join(dirname, '..', 'config/config.env'))
        config = load_config(filename)
        return config
    
    async def notification_before_battle(self):
        while True:
            try:
                TIMEZONE = pytz.timezone('Europe/Moscow')
                now = datetime.now(TIMEZONE)

                if self.next_battle_start:
                    battle_time = self.next_battle_start
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –≤–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    battle_time = await self.get_next_battle_time()

                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ battle_time –∏–º–µ–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
                if battle_time.tzinfo is None:
                    battle_time = TIMEZONE.localize(battle_time)

                notification_time = battle_time - timedelta(hours=1)
                
                # –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logging.info(f"Current time: {now}")
                logging.info(f"Battle time: {battle_time}")
                logging.info(f"Notification time: {notification_time}")
                
                wait_seconds = (notification_time - now).total_seconds()
                logging.info(f"Wait seconds: {wait_seconds}")

                if wait_seconds > 0:
                    logging.info(f"Waiting {wait_seconds} seconds until notification")
                    await asyncio.sleep(wait_seconds)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                    if self.notification_task and self.notification_task.cancelled():
                        break
                    
                    config = await self.get_config()
                    bot_link = config.tg_bot.bot_link
                    await self.bot.send_message(
                        self.channel_id,
                        f"üî• –ü—Ä–∏–Ω–∏–º–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–æ—Ç–æ, –∫–∏–¥–∞—Ç—å —Å—é–¥–∞: <a href='{bot_link}'>c—Å—ã–ª–∫–∞</a>\n\n"
                        f"–ë–∞—Ç—Ç–ª –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å (–≤ {battle_time.strftime('%H:%M')})!"
                    ,parse_mode='HTML')
                    
                    users = await get_all_users()
                    users_id = [i[0] for i in users]
                    for id_u in users_id:
                        try:
                            await self.bot.send_message(
                            id_u,
                            f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ë–∞—Ç—Ç–ª –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å (–≤ {battle_time.strftime('%H:%M')})!"
                    )
                        except Exception as e:
                            print('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ' + str(e))
                    logging.info("Notification sent successfully")

                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
                await asyncio.sleep(10)  # –£–≤–µ–ª–∏—á–∏–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ –º–∏–Ω—É—Ç—ã

            except asyncio.CancelledError:
                logging.info("Notification task was cancelled")
                break
            except Exception as e:
                logging.error(f"Error in notification task: {e}", exc_info=True)
                await asyncio.sleep(60)

    async def start_notification_task(self):
        try:
            if self.notification_task is None or self.notification_task.done():
                self.notification_task = asyncio.create_task(self.notification_before_battle())
                logging.info("Notification task started")
            else:
                logging.info("Notification task is already running")
                
        except Exception as e:
            logging.error(f"Error starting notification task: {e}", exc_info=True)

    async def stop_notification_task(self):
        try:
            if self.notification_task and not self.notification_task.done():
                self.notification_task.cancel()
                try:
                    await self.notification_task
                except asyncio.CancelledError:
                    pass
                self.notification_task = None
                logging.info("Notification task stopped")
            else:
                logging.info("Notification task is not running")
        except Exception as e:
            logging.error(f"Error stopping notification task: {e}", exc_info=True)

    def get_channel_id(self):
        dirname = os.path.dirname(__file__)
        filename = os.path.abspath(os.path.join(dirname, '..', 'config/config.env'))
        config = load_config(filename)
        return config.tg_bot.channel_id

    def get_super_admin_ids(self):
        dirname = os.path.dirname(__file__)
        filename = os.path.abspath(os.path.join(dirname, '..', 'config/config.env'))
        config = load_config(filename)
        return config.tg_bot.super_admin_ids


    async def start_battle(self):
        await reset_vote_states()
        users = await get_all_users()
        users_id = [i[0] for i in users]
        for id_u in users_id:
            try:
                await self.bot.send_message(
                    id_u,
                    f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ë–∞—Ç—Ç–ª –Ω–∞—á–∞–ª—Å—è!"
                )
            except Exception as e:
                logging.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {id_u}: {str(e)}')
                continue
        self.battle_active = True
        self.first_round_active = True
        round_number = 1
        TIMEZONE = pytz.timezone('Europe/Moscow')
        # –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –±–∞—Ç—Ç–ª–∞
        self.current_round_start = datetime.now(TIMEZONE)

        while self.battle_active:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            if not self.battle_active:
                break
            await swap_user_position()
            now = datetime.now(TIMEZONE)
            participants = await get_participants()
            # –ï—Å–ª–∏ –±–∞—Ç—Ç–ª –±—ã–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            # if not self.battle_active:
            #     break
            
            if round_number == 1:
                await users_plays_buttle_update()
            
            if len(participants) == 1:
                await self.end_battle([participants[0]])
                break
            elif len(participants) == 2 and participants[0]['points'] == participants[1]['points']:
                await self.end_battle([participants[0], participants[1]])
                break
            if not self.battle_active:
                break
            if not self.battle_active:
                break
            await delete_previous_messages(self.bot, self.channel_id)
            await delete_users_points()
            await update_admin_battle_points()
            # settings = await select_battle_settings()
            
            # if not self.battle_active:
            #     break
            if 2 < len(participants)<=4:
                round_txt = f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–ª—É—Ñ–∏–Ω–∞–ª!"
                start_message = await self.bot.send_message(
                self.channel_id,
                round_txt
            )
            elif len(participants)==2:
                round_txt = f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ñ–∏–Ω–∞–ª!"
                start_message = await self.bot.send_message(
                self.channel_id,
                round_txt
            )
            else:
                round_txt = f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞—É–Ω–¥ {round_number}!"
                start_message = await self.bot.send_message(
                self.channel_id,
                round_txt
            )
            # if not self.battle_active:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞—É–Ω–¥–µ
            #     await delete_previous_messages(self.bot, self.channel_id)
            #     break
            if not self.battle_active:
                break
            await save_message_ids([start_message.message_id])
            current_start = datetime.now(TIMEZONE)
            message_ids = await send_battle_pairs(self.bot, self.channel_id, participants,self.prize, round_txt,self.round_duration, self.min_votes_for_single, current_start)
            await save_message_ids(message_ids)
            if not self.battle_active:
                break
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—É–Ω–¥–∞
            # if now.hour < 10 and now.hour >= 0:
            if now.hour < 10 and now.hour >= 0:  # –ï—Å–ª–∏ —Ä–∞—É–Ω–¥ –Ω–∞—á–∞–ª—Å—è –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏
                today = now.date()
                round_end_time = self.timezone.localize(datetime.combine(today, time(hour=10)))
                wait_time = (round_end_time - now).total_seconds()
            else:
                wait_time = self.round_duration * 60  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã

            # –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä–µ—à–Ω–∏—è —Ä–∞—É–Ω–¥–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            start_time = datetime.now(TIMEZONE)
            if not self.battle_active:
                break
            end_time = start_time + timedelta(seconds=wait_time)

            while datetime.now(TIMEZONE) < end_time:
                try:
                    if not self.battle_active:
                        return
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                    await asyncio.sleep(10)

                    new_participants = await get_new_participants(participants)
                    if new_participants:
                        logging.info(f"Adding {len(new_participants)} new participants to the battle")
                        participants.extend(new_participants)
                        new_message_ids = await send_battle_pairs(self.bot, self.channel_id, new_participants,self.prize, round_txt,self.round_duration,self.min_votes_for_single, current_start)
                        await save_message_ids(new_message_ids)
                except Exception as e:
                    logging.error(f"Error while checking new participants: {e}")

            end_values = await end_round(self.bot, self.channel_id, self.min_votes_for_single)
            # end_message_ids = end_values[0]
            # await save_message_ids(end_message_ids)
            losers = end_values[0]

            await remove_losers(losers)
            round_number += 1
            self.min_votes_for_single += 5
            self.first_round_active = False

            await asyncio.sleep(self.break_duration * 60)

    async def end_battle(self, winners: list):
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_previous_messages(self.bot, self.channel_id)
        for winner in winners:
            await users_buttle_win_update(winner['user_id'])
        # –û–±—ä—è–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        final_message_ids = await announce_winner(self.bot, self.channel_id, winners)
        await save_message_ids(final_message_ids)
        await delete_users_add_voices()
        await clear_users_in_batl()
        await swap_user_position_first()
        BATTLE_SETTINGS = await select_battle_settings()
        self.min_votes_for_single = BATTLE_SETTINGS[2]

        TIMEZONE = pytz.timezone('Europe/Moscow')
        now = datetime.now(TIMEZONE)
        battle_duration = now - self.current_round_start

        if battle_duration > timedelta(days=1):
            self.next_battle_start = TIMEZONE.localize(now + timedelta(hours=2))

        else:
            next_day = now.date() + timedelta(days=1)
            self.next_battle_start = TIMEZONE.localize(
                datetime.combine(next_day, self.DEFAULT_BATTLE_TIME)
            )

            # if now.hour >= 0 and now.hour < 10:
            #     self.next_battle_start = TIMEZONE.localize(
            #         datetime.combine(next_day, time(hour=10, minute=0))
            #     )
            if now.hour >= 0 and now.hour < 10:
                current_day = now.date()  # –±–µ—Ä–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                self.next_battle_start = TIMEZONE.localize(
                    datetime.combine(current_day, time(hour=10, minute=0))
                )

        await self.bot.send_message(
            self.channel_id,
            f"–°–ª–µ–¥—É—é—â–∏–π –±–∞—Ç—Ç–ª –Ω–∞—á–Ω–µ—Ç—Å—è –≤ {self.next_battle_start.strftime('%d/%m, %H:%M')}"
            )
        try:
            users_buffer = await get_users_in_buffer()
            for user in users_buffer:
                await create_user_in_batl(user['user_id'],user['photo_id'], 'user')
                await delete_users_in_buffer()
        except Exception as e:
            print('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –≤ –±–∞—Ç—Ç–ª ' + str(e))
        self.battle_active = False
        self.first_round_active = False


    async def get_battle_status(self) -> str:
        """–ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –±–∞—Ç—Ç–ª–∞"""
        TIMEZONE = pytz.timezone('Europe/Moscow')
        now = datetime.now(TIMEZONE)

        status = []
        status.append(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%H:%M')}")
        status.append(f"–ë–∞—Ç—Ç–ª –∞–∫—Ç–∏–≤–µ–Ω: {self.battle_active}")
        status.append(f"–ü–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ –∞–∫—Ç–∏–≤–µ–Ω: {self.first_round_active}")

        if self.next_battle_start:
            status.append(f"–°–ª–µ–¥—É—é—â–∏–π –±–∞—Ç—Ç–ª –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞: {self.next_battle_start.strftime('%H:%M')}")

        if self.battle_active:
            if self.first_round_active:
                now = datetime.now(TIMEZONE)
                time_passed = (now - self.current_round_start).total_seconds()
                time_remaining = (self.round_duration * 60) - time_passed
                round_end = now + timedelta(seconds=time_remaining)
                status.append(f"–¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤: {round_end.strftime('%H:%M')}")


        return "\n".join(status)

    async def get_next_battle_time(self) -> datetime:
        """–ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—Ç–ª–∞"""
        try:
            if not self.DEFAULT_BATTLE_TIME:
                logging.warning("DEFAULT_BATTLE_TIME not set, initializing...")
                await self.initialize()
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
            
            current_settings = await select_battle_settings()
            current_hours = current_settings[4] // 3600
            current_minutes = (current_settings[4] % 3600) // 60
            current_battle_time = time(hour=int(current_hours), minute=int(current_minutes))
            
            if not self.next_battle_start or current_battle_time != self.DEFAULT_BATTLE_TIME:
                now = datetime.now(self.timezone)
                print(f"now in get {now}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º DEFAULT_BATTLE_TIME –Ω–∞ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                self.DEFAULT_BATTLE_TIME = current_battle_time
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—Ç–ª–∞
                battle_time = datetime.combine(
                    now.date(),
                    self.DEFAULT_BATTLE_TIME
                )
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
                battle_time = self.timezone.localize(battle_time)
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
                if now >= battle_time:
                    battle_time += timedelta(days=1)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
                # if battle_time.hour >= 0 and battle_time.hour < 10:
                #     next_day = battle_time.date()
                #     # if battle_time.hour >= 3:
                #         # 22 –±—ã—Ç—å –¥–æ–ª–∂–Ω–æ
                #     next_day += timedelta(days=1)
                #     battle_time = self.timezone.localize(
                #         datetime.combine(next_day, time(hour=10, minute=0))
                #     )
                if battle_time.hour >= 0 and battle_time.hour < 10:
                    current_day = battle_time.date()  # –±–µ—Ä–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                    battle_time = self.timezone.localize(
                        datetime.combine(current_day, time(hour=10, minute=0))
                    )


                self.next_battle_start = battle_time
                logging.info(f"Next battle time set to: {battle_time}")

            return self.next_battle_start
        except Exception as e:
            logging.error(f"Error in get_next_battle_time: {e}", exc_info=True)
            raise




    
    
    
    
    
    
    
